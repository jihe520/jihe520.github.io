<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue3 +  vite + element-plus 快速入门教程（小兔鲜电商项目）</title>
      <link href="/2024/11/29/vue3-vite-element-plus-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%88%E5%B0%8F%E5%85%94%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%89/"/>
      <url>/2024/11/29/vue3-vite-element-plus-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%EF%BC%88%E5%B0%8F%E5%85%94%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a target="_blank" rel="noopener" href="https://www.bilibili.com/list/watchlater?bvid=BV1Ac411K7EQ&oid=270893673&p=33">黑马程序员前端Vue3小兔鲜电商项目实战，vue3全家桶从入门到实战电商项目一套通关-飞行的贝克-稍后再看-哔哩哔哩视频 (bilibili.com)</a></p><h1 id="全部视频标题"><a href="#全部视频标题" class="headerlink" title="全部视频标题"></a>全部视频标题</h1><ol><li>Day1-01.Vue3小兔鲜先导课</li><li>Day1-02.认识Vue3</li><li>Day1-03.使用create-vue创建项目</li><li>Day1-04.熟悉项目目录和关键文件</li><li>Day1-05.组合式API入口-setup</li><li>Day1-06.组合式API-reactive和ref函数</li><li>Day1-07.组合式API-computed</li><li>Day1-08.组合式API-watch-基本使用和立即执行</li><li>Day1-09.组合式API-watch-深度侦听和精确侦听</li><li>Day1-10.组合式API-生命周期函数</li><li>Day1-11.组合式API下的父子通信-父传子</li><li>Day1-12.组合式API下的父子通信-子传父</li><li>Day1-13.组合式API-模版引用</li><li>Day1-14.组合式API-provide和inject</li><li>Day1-15.Vue3综合小案例</li><li>Day1-16.补充作业-编辑功能作业</li><li>Day2-01.Pinia-添加pinia到vue项目</li><li>Day2-02.Pinia-counter基础使用</li><li>Day2-03.Pinia-getters和异步action</li><li>Day2-04.Pinia-storeToRefs和调试</li><li>Day2-05.项目起步-项目初始化和git管理</li><li>Day2-06.项目起步-别名路径联想设置</li><li>Day2-07.项目起步-elementPlus自动按需导入配置</li><li>Day2-08.项目起步-elementPlus主题色定制</li><li>Day2-09.项目起步-axios基础配置</li><li>Day2-10.项目起步-项目整体路由设计</li><li>Day2-11.项目起步-静态资源引入和ErrorLen安装</li><li>Day2-12.项目起步-scss文件的自动导入</li><li>Day2-13.Layout-静态模版结构搭建</li><li>Day2-14.Layout-字体图标引入</li><li>Day2-15.Layout-一级导航渲染</li><li>Day2-16.Layout-吸顶导航交互实现</li><li>Day2-17.Layout-Pinia优化重复请求</li><li>Day3-01.Home-整体结构拆分和分类实现</li><li>Day3-02.Home-banner轮播图实现</li><li>Day3-03.Home-面板组件封装</li><li>Day3-04.Home-新鲜好物业务实现</li><li>Day3-05.Home-图片懒加载指令实现</li><li>Day3-06.Home-懒加载指令优化</li><li>Day3-07.Home-Product产品列表实现</li><li>Day3-08.Home-GoodsItem组件封装</li><li>Day3-09.一级分类-整体认识和路由配置</li><li>Day3-10.一级分类-面包屑导航渲染</li><li>Day3-11.一级分类-轮播图功能实现</li><li>Day3-12.一级分类-激活状态控制和分类列表渲染</li><li>Day3-13.一级分类-解决路由缓存问题</li><li>Day3-14.一级分类-使用逻辑函数拆分业务</li><li>Day4-01.二级分类-整体认识和路由配置</li><li>Day4-02.二级分类-面包屑导航实现</li><li>Day4-03.二级分类-基础商品列表实现</li><li>Day4-04.二级分类-列表筛选功能实现</li><li>Day4-05.二级分类-列表无限加载实现</li><li>Day4-06.二级分类-定制路由滚动行为</li><li>Day4-07.详情页-整体认识和路由配置</li><li>Day4-08.详情页-基础数据渲染</li><li>Day4-09.详情页-热榜区-基础组件封装和数据渲染</li><li>Day4-10.详情页-热榜区-适配不同title和数据列表</li><li>Day4-11.详情页-图片预览组件-小图切换大图显示</li><li>Day4-12.详情页-图片预览组件-放大镜-滑块跟随移动</li><li>Day4-13.详情页-图片预览组件-放大镜-大图效果实现</li><li>Day4-14.详情页-图片预览组件-props适配和整体总结</li><li>Day4-15.详情页-SKU组件熟悉使用</li><li>Day4-16.详情页-通用组件统一注册全局</li><li>Day5-01.登录-整体认识和路由配置</li><li>Day5-02.登录-表单校验实现</li><li>Day5-03.登录-表单校验-自定义校验规则</li><li>Day5-04.登录-表单校验-统一校验</li><li>Day5-05.登录-基础功能实现</li><li>Day5-06.登录-Pinia管理用户数据</li><li>Day5-07.登录-Pinia用户数据持久化</li><li>Day5-08.登录-登录和非登录状态下的模版适配</li><li>Day5-09.登录-请求拦截器携带Token</li><li>Day5-10.登录-退出登录功能实现</li><li>Day5-11.登录-Token失效401拦截处理</li><li>Day5-12.购物车-流程梳理和本地加入购物车实现</li><li>Day5-13.购物车-本地-头部购物车列表渲染</li><li>Day5-14.购物车-本地-头部购物车删除功能实现</li><li>Day5-15.购物车-本地-头部购物车统计计算</li><li>Day6-01.购物车-本地-列表购物车基础数据渲染</li><li>Day6-02.购物车-本地-列表购物车单选功能</li><li>Day6-03.购物车-本地-购物车列表全选功能</li><li>Day6-04.购物车-本地-购物车列表统计数据实现</li><li>Day6-05.购物车-接口-加入购物车</li><li>Day6-06.购物车-接口-删除购物车</li><li>Day6-07.退出登录-清空购物车数据</li><li>Day6-08.购物车-合并本地购物车到服务器</li><li>Day6-09.结算-路由配置和基础数据渲染</li><li>后面没做了</li></ol><p>vue3 +  vite + element-plus 快速入门教程（小兔鲜电商项目）</p><h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vue@lastest</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置@"></a>配置@</h2><p>jsconfig.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">// 设置相对根路径</span></span><br><span class="line">      <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span> <span class="comment">// 将 @ 指向 src 目录</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>vite.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>; <span class="comment">// Node.js 的 path 模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&quot;unplugin-auto-import/vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&quot;unplugin-vue-components/vite&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&quot;unplugin-vue-components/resolvers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>(&#123; <span class="attr">importStyle</span>: <span class="string">&quot;sass&quot;</span> &#125;)],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>), <span class="comment">// 将 @ 指向 src 目录</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">      <span class="attr">scss</span>: &#123;</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="comment">// 自动导入</span></span><br><span class="line">        <span class="string">`</span></span><br><span class="line"><span class="string">        @use &quot;@/styles/element/index.scss&quot; as *;</span></span><br><span class="line"><span class="string">        @use &quot;@/styles/var.scss&quot; as *;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vscode/settings.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;path-intellisense.mappings&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/src&quot;</span> <span class="comment">// 配置路径映射，@ 代表 src 目录</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;typescript.preferences.importModuleSpecifier&quot;</span>: <span class="string">&quot;shortest&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>以下是依赖项的详细表格说明：</p><table><thead><tr><th><strong>依赖名称</strong></th><th><strong>分类</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td><strong>axios</strong></td><td>运行依赖</td><td>用于发送 HTTP 请求（如 GET、POST）与后端交互。</td></tr><tr><td><strong>element-plus</strong></td><td>运行依赖</td><td>Vue 3 的 UI 组件库，包含各种现代化组件（如表单、按钮、表格）。</td></tr><tr><td><strong>pinia</strong></td><td>运行依赖</td><td>Vue 3 的状态管理库，简单、轻量且功能强大。</td></tr><tr><td><strong>pinia-plugin-persistedstate</strong></td><td>运行依赖</td><td>Pinia 的持久化插件，用于将状态存储到 <code>localStorage</code> 或 <code>sessionStorage</code>。</td></tr><tr><td><strong>vue-router</strong></td><td>运行依赖</td><td>Vue.js 官方路由库，支持路由管理与页面导航。</td></tr><tr><td><strong>sass</strong></td><td>开发依赖</td><td>CSS 预处理器，支持嵌套规则、变量、函数等特性。</td></tr><tr><td><strong>unplugin-auto-import</strong></td><td>开发依赖</td><td>自动导入工具，无需手动导入 Vue、Router 等模块，提高开发效率。</td></tr><tr><td><strong>unplugin-vue-components</strong></td><td>开发依赖</td><td>自动组件导入插件，自动解析 Vue 项目中使用的组件并引入对应代码。</td></tr><tr><td><strong>vite</strong></td><td>开发依赖</td><td>现代化构建工具，支持快速开发、热更新和高效的生产环境构建。</td></tr><tr><td>vue-use</td><td>开发依赖</td><td>Vite 的 Vue 插件，用于支持 <code>.vue</code> 文件的解析和功能。</td></tr></tbody></table><h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">VUE-RABBIT</span><br><span class="line">├── <span class="selector-class">.idea</span>                # 存储 jetbrain 的项目配置文件</span><br><span class="line">├── <span class="selector-class">.vscode</span>              # 存储 Visual Studio <span class="selector-tag">Code</span> 编辑器的项目配置文件</span><br><span class="line">├── node_modules         # 包含通过 npm 或 yarn 安装的项目依赖包</span><br><span class="line">├── public               # 静态资源目录，通常存放不会被 Webpack 或 Vite 打包的文件，如 favicon</span><br><span class="line">├── <span class="attribute">src</span>                  # 项目的源码目录</span><br><span class="line">│   ├── apis             # 存放与后端交互的 API 封装文件</span><br><span class="line">│   ├── assets           # 存放静态资源，例如图片、字体等</span><br><span class="line">│   ├── components       # 可复用的 Vue 组件集合</span><br><span class="line">│   ├── composables      # 存放 Vue <span class="number">3</span> 的 Composition API 相关的逻辑封装文件</span><br><span class="line">│   ├── directives       # 定义自定义指令的文件夹</span><br><span class="line">│   ├── router           # 路由配置文件目录，用于管理页面导航</span><br><span class="line">│   ├── stores           # 状态管理文件夹，例如使用 Vuex 或 Pinia</span><br><span class="line">│   ├── styles           # 全局样式文件目录，存放 CSS 或 SCSS 文件</span><br><span class="line">│   ├── utils            # 实用工具函数和通用方法</span><br><span class="line">│   ├── views            # 页面组件目录，通常对应路由的视图组件</span><br><span class="line">│   ├── App<span class="selector-class">.vue</span>          # 根组件，Vue 应用的入口文件</span><br><span class="line">│   ├── <span class="selector-tag">main</span><span class="selector-class">.js</span>          # 应用的主入口文件，用于初始化 Vue 实例并挂载</span><br><span class="line">│   └── style<span class="selector-class">.css</span>        # 全局样式文件</span><br><span class="line">├── <span class="selector-class">.gitignore</span>           # Git 配置文件，定义需要忽略提交到版本控制的文件或目录</span><br><span class="line">├── index<span class="selector-class">.html</span>           # 应用的 <span class="selector-tag">HTML</span> 模板文件，Vite 会在构建时注入脚本和样式</span><br><span class="line">├── jsconfig<span class="selector-class">.json</span>        # JavaScript 配置文件，支持路径别名和代码提示</span><br><span class="line">├── package-lock<span class="selector-class">.json</span>    # 锁定项目依赖的具体版本，确保一致性</span><br><span class="line">├── package<span class="selector-class">.json</span>         # 项目描述文件，定义依赖、脚本以及项目信息</span><br><span class="line">├── README<span class="selector-class">.md</span>            # 项目的说明文档，通常用于记录项目的简介和使用方法</span><br><span class="line">└── vite<span class="selector-class">.config</span><span class="selector-class">.js</span>       # Vite 的配置文件，定义开发环境和构建的相关配置</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果按照每个页面维护自己的目录，则<code>view</code>下面每个文件夹有自己的<code>components</code> 和<code>composables</code>文件夹📂</p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 Vue 的 createApp 方法用于创建应用实例</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="comment">// 引入 Pinia，用于状态管理</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="comment">// 引入全局样式文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/styles/common.scss&quot;</span>;</span><br><span class="line"><span class="comment">// 引入主应用组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="comment">// 引入路由配置文件</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router/index&quot;</span>;</span><br><span class="line"><span class="comment">// 引入自定义指令插件（如图片懒加载）</span></span><br><span class="line"><span class="keyword">import</span> &#123; lazyPlugin &#125; <span class="keyword">from</span> <span class="string">&quot;@/directives&quot;</span>;</span><br><span class="line"><span class="comment">// 引入全局组件插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; componentPlugin &#125; <span class="keyword">from</span> <span class="string">&quot;@/components&quot;</span>;</span><br><span class="line"><span class="comment">// 引入 Pinia 的持久化插件，用于持久化状态</span></span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Vue 应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"><span class="comment">// 创建 Pinia 实例并使用持久化插件</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPluginPersistedstate);</span><br><span class="line"><span class="comment">// 注册 Pinia 到应用实例</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br><span class="line"><span class="comment">// 注册路由到应用实例</span></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"><span class="comment">// 注册自定义指令插件（如懒加载）</span></span><br><span class="line">app.<span class="title function_">use</span>(lazyPlugin);</span><br><span class="line"><span class="comment">// 注册全局组件插件</span></span><br><span class="line">app.<span class="title function_">use</span>(componentPlugin);</span><br><span class="line"><span class="comment">// 挂载应用到页面中的 #app 容器</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="依赖技术"><a href="#依赖技术" class="headerlink" title="依赖技术"></a>依赖技术</h1><h2 id="Element-Plus-UI"><a href="#Element-Plus-UI" class="headerlink" title="Element-Plus-UI"></a>Element-Plus-UI</h2><h2 id="axios-使用"><a href="#axios-使用" class="headerlink" title="axios 使用"></a>axios 使用</h2><p><code>utils/http.js</code>：封装📦axios</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios 基础的封装</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/theme-chalk/el-message.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&quot;@/stores/user&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router&quot;</span>; <span class="comment">// 和.vue中不同，这是.js文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> httpInstance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;http://pcapi-xiaotuxian-front-devtest.itheima.net&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求拦截器</span></span><br><span class="line"><span class="comment">// 在登录状态下，才能请求api数据</span></span><br><span class="line">httpInstance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取token</span></span><br><span class="line">    <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line">    <span class="keyword">const</span> token = userStore.<span class="property">userInfo</span>.<span class="property">token</span></span><br><span class="line">    <span class="comment">// 在请求头中拼接token</span></span><br><span class="line">    <span class="keyword">if</span>(token)&#123;</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;,<span class="function"><span class="params">e</span>=&gt;</span><span class="title class_">Promise</span>.<span class="title function_">reject</span>(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式拦截器</span></span><br><span class="line">httpInstance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="property">data</span>,<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">    <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">        <span class="attr">message</span>:e?.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// token 校验失败：token过期，错误</span></span><br><span class="line">    <span class="keyword">if</span>(e?.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line">        userStore.<span class="title function_">clearUserInfo</span>()</span><br><span class="line">        <span class="comment">// 跳转到登录页面</span></span><br><span class="line">        router.<span class="title function_">push</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(e)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> httpInstance</span><br></pre></td></tr></table></figure><p><code>api\category.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpInstance <span class="keyword">from</span> <span class="string">&quot;@/utils/http&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 获取分类 ，https:// category?id=1005000</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; id  // `category/$&#123;id&#125;`</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getCategoryAPI</span>(<span class="params">id</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;</span><br><span class="line">            id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 获取分类下的小分类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">id</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getCategoryFilterAPI</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/category/sub/filter&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;</span><br><span class="line">            id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 获取导航数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> &#123;<span class="type"></span></span></span><br><span class="line"><span class="type"><span class="comment"> categoryId: 1005000 ,</span></span></span><br><span class="line"><span class="type"><span class="comment"> page: 1,</span></span></span><br><span class="line"><span class="type"><span class="comment"> pageSize: 20,</span></span></span><br><span class="line"><span class="type"><span class="comment"> sortField: &#x27;publishTime&#x27; | &#x27;orderNum&#x27; | &#x27;evaluateNum&#x27;</span></span></span><br><span class="line"><span class="type"><span class="comment"> </span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getSubCategoryAPI</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/category/goods/temporary&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取热榜商品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; <span class="variable">id</span> - 商品id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; <span class="variable">type</span> - 1代表24小时热销榜 2代表周热销榜</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; <span class="variable">limit</span> - 获取个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getHotGoodsAPI</span> = (<span class="params">&#123; id, type, limit = <span class="number">3</span> &#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/goods/hot&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;</span><br><span class="line">            id,</span><br><span class="line">            type,</span><br><span class="line">            limit</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>apis\layout.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpInstance <span class="keyword">from</span> <span class="string">&quot;@/utils/http&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getCategoryAPI</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/home/category/head&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 轮播图</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getBannerAPI</span>(<span class="params">param = &#123;&#125;</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;distributionSite = <span class="string">&#x27;1&#x27;</span>&#125; = param</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/home/banner&#x27;</span>, <span class="comment">//默认 method 为 get</span></span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      distributionSite</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 获取新鲜好物</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">Promise</span>&#125; A promise that resolves with the response from the API.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getNewAPI</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/home/new&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getHotAPI</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/home/hot&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getGoodsAPI</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/home/goods&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用这些API要求async function ; awati xxAPI()</p><h2 id="路由-Vue-Router-使用"><a href="#路由-Vue-Router-使用" class="headerlink" title="路由  Vue-Router 使用"></a>路由  Vue-Router 使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createWebHashHistory, createRouter&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="comment">// 一级路由首页显示布局 Layout</span></span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/Layout/index.vue&quot;</span>),</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 二级路由 默认显示 Home 页面</span></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/Home/index.vue&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;category/:id&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/Category/index.vue&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123; <span class="comment">// 二级分类模块</span></span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;category/sub/:id&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/SubCategory/index.vue&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&quot;detail/:id&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/Detail/index.vue&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/views/Login/index.vue&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">    routes,</span><br><span class="line">    <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">        <span class="comment">// 始终滚动到顶部</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">top</span>: <span class="number">0</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><blockquote><p>[!info] path参数<br><code>/</code> 代表根路经下面的<br>无 <code>/</code> ,类似 <code>“catagory/:id”</code> 相对于父下面</p></blockquote><p>先在<code>views\Layout.vue</code>下面👇，划分布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;LayoutFixed&gt;&lt;/LayoutFixed&gt;</span><br><span class="line">    &lt;NavLayout&gt;&lt;/NavLayout&gt;</span><br><span class="line">    &lt;HeaderLayout&gt;&lt;/HeaderLayout&gt;    </span><br><span class="line">    &lt;!-- 二级路由：这里负责主要内容显示  --&gt;</span><br><span class="line">    &lt;RouterView&gt;&lt;/RouterView&gt; </span><br><span class="line">    </span><br><span class="line">    &lt;FooterLayout&gt;&lt;/FooterLayout&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>[!info] 什么<br>export default  其他文件 ： import  xxx from<br>export  其他文件： import { } from</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;<span class="title class_">RouterLink</span> :to=<span class="string">&quot;`/detail/$&#123;item.id&#125;`&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;item in hotGoods&quot;</span> :key=<span class="string">&quot;item.id&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.picture&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;name ellipsis&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc ellipsis&quot;</span>&gt;</span>&#123;&#123; item.desc &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span><span class="symbol">&amp;yen;</span>&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;/<span class="title class_">RouterLink</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">views</span><br><span class="line">├── Category</span><br><span class="line">│   ├── composables</span><br><span class="line">│   │   ├── useBanner<span class="selector-class">.js</span></span><br><span class="line">│   │   ├── useCategory<span class="selector-class">.js</span></span><br><span class="line">│   ├── index<span class="selector-class">.vue</span></span><br><span class="line">├── Detail</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   ├── HotGoods<span class="selector-class">.vue</span></span><br><span class="line">│   ├── index<span class="selector-class">.vue</span></span><br><span class="line">├── Home</span><br><span class="line">├── Layout</span><br><span class="line">│   ├── components</span><br><span class="line">│   ├── index<span class="selector-class">.vue</span></span><br><span class="line">├── Login</span><br><span class="line">├── SubCategory</span><br></pre></td></tr></table></figure><p>每个页面单独一个文件夹📂，每个页面维护自己<br>composables 存放Hook <a href="#%5E65c562">Hook</a><br>components 存放组件</p><p><code>route.params.id</code> 是在基于 JavaScript 的前端框架（例如 Vue.js、React Router 等）中经常使用的一种表达方式，用于获取路由参数中的 <code>id</code> 值。</p><p>以下是它的含义和使用场景：</p><ol><li><strong>路由参数的获取</strong></li></ol><ul><li><code>route</code>：通常表示当前路由对象，包含了与当前路径相关的所有信息。</li><li><code>params</code>：表示路由路径中定义的动态参数。</li><li><code>id</code>：表示动态参数的键，通常用来标识某个具体的值（例如某个用户的 ID、文章的 ID 等）。</li></ul><ol start="2"><li><strong>常见使用场景</strong></li></ol><p>当定义一个带有动态参数的路由时，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue Router 路由配置</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserDetail</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个路由中，<code>:id</code> 是一个动态参数。</p><p>如果访问路径为 <code>/user/123</code>，<code>route.params.id</code> 将会返回 <code>123</code>。</p><h2 id="Pinia-使用"><a href="#Pinia-使用" class="headerlink" title="Pinia 使用"></a>Pinia 使用</h2><p><code>stores\categoryStore.js</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCategoryAPI &#125; <span class="keyword">from</span> <span class="string">&quot;@/apis/layout&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 pinia 全局管理category数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCategoryStore = <span class="title function_">defineStore</span>(<span class="string">&quot;category&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// state </span></span><br><span class="line">  <span class="keyword">const</span> categoryList = <span class="title function_">ref</span>([]);</span><br><span class="line">  <span class="comment">//action 请求数据</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getCategory</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getCategoryAPI</span>();</span><br><span class="line">    categoryList.<span class="property">value</span> = res.<span class="property">result</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; categoryList, getCategory &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCategoryStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/categoryStore&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> categoryStore = <span class="title function_">useCategoryStore</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 pinia 管理用户登陆信息</span></span><br><span class="line"><span class="comment">// pinia state 保存了用户数据,全局可用</span></span><br><span class="line"><span class="comment">// action 来登录逻辑，获取用户数据，存储数据到 state</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; loginAPI &#125; <span class="keyword">from</span> <span class="string">&quot;@/apis/user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(</span><br><span class="line">  <span class="string">&quot;user&quot;</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// state</span></span><br><span class="line">    <span class="keyword">const</span> userInfo = <span class="title function_">ref</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// action</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getUserInfo</span> = <span class="keyword">async</span> (<span class="params">&#123; account, password &#125;</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">loginAPI</span>(&#123; account, password &#125;);</span><br><span class="line">      userInfo.<span class="property">value</span> = res.<span class="property">result</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理退出的逻辑</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">clearUserInfo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      userInfo.<span class="property">value</span> = &#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      userInfo,</span><br><span class="line">      getUserInfo,</span><br><span class="line">      clearUserInfo</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="comment">// 插件会自动持久化和删除loaclStorage中的数据</span></span><br><span class="line">    <span class="attr">persist</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="vue-use-和-自定义指令"><a href="#vue-use-和-自定义指令" class="headerlink" title="vue-use 和 自定义指令"></a>vue-use 和 自定义指令</h2><p><code>directives\index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义懒加载插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; useIntersectionObserver &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> lazyPlugin = &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 配置此应用</span></span><br><span class="line">    <span class="comment">// 懒加载自定义指令的实现：当浏览器视口到达图片时候才发送网络图片请求</span></span><br><span class="line">    app.<span class="title function_">directive</span>(<span class="string">&quot;img-lazy&quot;</span>, &#123;</span><br><span class="line">      <span class="title function_">mounted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">        <span class="comment">// el 是dom ： img ； binding.value ； 属性 item.picture</span></span><br><span class="line">        <span class="keyword">const</span> &#123; stop &#125; = <span class="title function_">useIntersectionObserver</span>(</span><br><span class="line">          el, <span class="comment">//观测的元素dom</span></span><br><span class="line">          <span class="function">(<span class="params">[&#123; isIntersecting &#125;]</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(isIntersecting);</span><br><span class="line">            <span class="keyword">if</span> (isIntersecting) &#123;</span><br><span class="line">              el.<span class="property">src</span> = binding.<span class="property">value</span>;</span><br><span class="line">              <span class="title function_">stop</span>() <span class="comment">//当加载一次后，停掉 监听，减小性能损耗</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用自定义指令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterLink to=&quot;/&quot; class=&quot;goods-item&quot;&gt;</span><br><span class="line">    &lt;img v-img-lazy=&quot;good.picture&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">    &lt;p class=&quot;name ellipsis&quot;&gt;&#123;&#123; good.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;desc ellipsis&quot;&gt;&#123;&#123; good.desc &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;price&quot;&gt;&amp;yen;&#123;&#123; good.price &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure><p>[Plugins | Vue.js (vuejs.org)](<a target="_blank" rel="noopener" href="https://vuejs.org/guide/reusability/plugins.html">https://vuejs.org/guide/reusability/plugins.html</a></p><h2 id="Hook-封装逻辑和数据"><a href="#Hook-封装逻辑和数据" class="headerlink" title="Hook 封装逻辑和数据"></a>Hook 封装逻辑和数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hooks封装,轮播图逻辑和数据</span></span><br><span class="line"><span class="keyword">import</span> &#123; getBannerAPI &#125; <span class="keyword">from</span> <span class="string">&#x27;@/apis/layout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;ref,onMounted&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useBanner</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 获取 banner</span></span><br><span class="line">    <span class="keyword">const</span> bannerList = <span class="title function_">ref</span>([]);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getBannerList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getBannerAPI</span>(&#123; <span class="attr">distributionSite</span>: <span class="string">&#x27;2&#x27;</span> &#125;);</span><br><span class="line">        bannerList.<span class="property">value</span> = res.<span class="property">result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onMounted</span>(getBannerList)</span><br><span class="line">    <span class="keyword">return</span> &#123;bannerList&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getCategoryAPI &#125; <span class="keyword">from</span> <span class="string">&#x27;@/apis/category&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRoute,onBeforeRouteUpdate &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCategory</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> category = <span class="title function_">ref</span>(&#123;&#125;)</span><br><span class="line">    <span class="keyword">const</span> route = <span class="title function_">useRoute</span>() <span class="comment">// 当前路由,返回当前的路由地址</span></span><br><span class="line">    <span class="comment">// 传进去当前分类的 id</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getCategory</span> = <span class="keyword">async</span> (<span class="params">id = route.params.id </span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getCategoryAPI</span>(id)</span><br><span class="line">        category.<span class="property">value</span> = res.<span class="property">result</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onMounted</span>(getCategory)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由参数更新时重新获取分类数据</span></span><br><span class="line">    <span class="title function_">onBeforeRouteUpdate</span>(<span class="function">(<span class="params">to</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">getCategory</span>(to.<span class="property">params</span>.<span class="property">id</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        category</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hook 向外提供轮播图的数据</p><p>外部使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;useBanner&#125; from &quot;@/views/Category/composables/useBanner.js&quot;;</span><br><span class="line">const &#123;bannerList&#125; = useBanner()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">            &lt;!-- 切换图片 --&gt;</span><br><span class="line">            &lt;div class=&quot;home-banner&quot;&gt;</span><br><span class="line">                &lt;el-carousel height=&quot;500px&quot;&gt;</span><br><span class="line">                    &lt;el-carousel-item v-for=&quot;item in bannerList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">                        &lt;img :src=&quot;item.imgUrl&quot; alt=&quot;&quot;&gt;</span><br><span class="line">                    &lt;/el-carousel-item&gt;</span><br><span class="line">                &lt;/el-carousel&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PTA第一期</title>
      <link href="/2024/01/04/PTA%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
      <url>/2024/01/04/PTA%E7%AC%AC%E4%B8%80%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="L2-4-寻宝图-dfs"><a href="#L2-4-寻宝图-dfs" class="headerlink" title="L2-4 寻宝图(dfs)"></a>L2-4 寻宝图(dfs)</h1><p>给定一幅地图，其中有水域，有陆地。被水域完全环绕的陆地是岛屿。有些岛屿上埋藏有宝藏，这些有宝藏的点也被标记出来了。本题就请你统计一下，给定的地图上一共有多少岛屿，其中有多少是有宝藏的岛屿。</p><p>输入格式：<br>输入第一行给出 2 个正整数 N 和 M (1&lt;N×M≤10^5)，是地图的尺寸，表示地图由 N 行 M 列格子构成。随后 N 行，每行给出 M 位个位数，其中 0 表示水域，1 表示陆地，2-9 表示宝藏。<br>注意：两个格子共享一条边时，才是“相邻”的。宝藏都埋在陆地上。默认地图外围全是水域。</p><p>输出格式：<br>在一行中输出 2 个整数，分别是岛屿的总数量和有宝藏的岛屿的数量。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 11</span><br><span class="line">01000000151</span><br><span class="line">11000000111</span><br><span class="line">00110000811</span><br><span class="line">00110100010</span><br><span class="line">00000000000</span><br><span class="line">00000111000</span><br><span class="line">00114111000</span><br><span class="line">00110010000</span><br><span class="line">00019000010</span><br><span class="line">00120000001</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 2</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span><span class="number">+5</span>;</span><br><span class="line"></span><br><span class="line">string mp[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="type">int</span> dysum, bz;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">bool</span> ishavebz;</span><br><span class="line"></span><br><span class="line"><span class="comment">//走过--&gt;0</span></span><br><span class="line"><span class="comment">//z 当前岛屿的宝藏</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mp[x][y] &gt;= <span class="string">&#x27;2&#x27;</span>) ishavebz = <span class="literal">true</span>;</span><br><span class="line">    mp[x][y] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> da = dx[i] + x;</span><br><span class="line">        <span class="type">int</span> db = dy[i] + y;</span><br><span class="line">        <span class="keyword">if</span> ( da &gt;= <span class="number">0</span> &amp;&amp; da &lt; n &amp;&amp; db &gt;= <span class="number">0</span> &amp;&amp; db &lt; m &amp;&amp; mp[da][db] != <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp[da][db] != <span class="string">&#x27;1&#x27;</span>) ishavebz = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(da, db);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; mp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mp[i][j] != <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                ishavebz = <span class="literal">false</span>;</span><br><span class="line">                dysum++;</span><br><span class="line">                <span class="built_in">dfs</span>(i, j);</span><br><span class="line">                <span class="keyword">if</span> (ishavebz) bz++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dysum &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; bz;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-7-智能护理中心统计-map-树，字符串数值判断"><a href="#7-7-智能护理中心统计-map-树，字符串数值判断" class="headerlink" title="7-7 智能护理中心统计(map,树，字符串数值判断)"></a>7-7 智能护理中心统计(map,树，字符串数值判断)</h1><p>智能护理中心系统将辖下的护理点分属若干个大区，例如华东区、华北区等；每个大区又分若干个省来进行管理；省又分市，等等。我们将所有这些有管理或护理功能的单位称为“管理结点”。现在已知每位老人由唯一的一个管理结点负责，每个管理结点属于唯一的上级管理结点管辖。你需要实现一个功能，来统计任何一个管理结点所负责照看的老人的数量。</p><p>注意这是一个动态问题，即随时可能有老人加入某个管理结点，并且老人是有可能从一个管理结点换到另一个管理结点去的。</p><p>输入格式：<br>输入在第一行中给出 2 个正整数：N（≤10^4）是老人的总数量，即老人们从 1 到 N 编号；M（≤10^5）是归属关系的总数。</p><p>接下来是 M 行，每行给出一对归属关系，格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A B</span><br></pre></td></tr></table></figure><p>表示 A 归属于 B。A 或 B 如果是某个管理结点，则用不超过 4 个大写英文字母表示其名称；如果是某位老人，则用老人的编号表示。这里每个 A 保证只有唯一的上级归属 B，且只有这个中心系统本身是没有上级归属的。此外，输入保证没有老人自己承担管理结点的角色，即 B 一定是一个管理结点，不可能是老人的编号。但一个管理结点既可以管辖下级结点，也可以直接护理一部分老人。</p><p>随后每行给出一个指令，格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指令 内容</span><br></pre></td></tr></table></figure><p>如果 指令 为 T，则表示有老人要入院或转院，内容 是某老人的编号和要去的管理结点的名称，以空格分隔；如果 指令 为 Q，则 内容 是一个管理结点的名称，意思是统计这个结点所负责照看的老人的数量；如果 指令 为 E，则表示输入结束。题目保证指令总数不会超过 100 个。</p><p>输出格式：<br>对每个 T 指令，将对应的老人转存到对应的管理结点名下；对每个 Q 指令，在一行中输出对应管理结点所负责照看的老人的数量。读到 E 指令就结束程序。</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">10 23</span><br><span class="line">EAST CNTR</span><br><span class="line">ZJ EAST</span><br><span class="line">SD EAST</span><br><span class="line">WEST CNTR</span><br><span class="line">SX WEST</span><br><span class="line">HZ ZJ</span><br><span class="line">JN SD</span><br><span class="line">2 JN</span><br><span class="line">8 JTH</span><br><span class="line">6 XAHP</span><br><span class="line">4 ZDYH</span><br><span class="line">5 ZDYH</span><br><span class="line">ZDYH HZ</span><br><span class="line">HUZ ZJ</span><br><span class="line">JX ZJ</span><br><span class="line">1 JX</span><br><span class="line">3 JN</span><br><span class="line">WZ ZJ</span><br><span class="line">XAHP XIAN</span><br><span class="line">XIAN SX</span><br><span class="line">YL SX</span><br><span class="line">JTH XIAN</span><br><span class="line">7 XAHP</span><br><span class="line">Q EAST</span><br><span class="line">T 1 YL</span><br><span class="line">Q EAST</span><br><span class="line">Q SX</span><br><span class="line">T 8 ZDYH</span><br><span class="line">Q HZ</span><br><span class="line">Q HUZ</span><br><span class="line">T 10 XAHP</span><br><span class="line">Q CNTR</span><br><span class="line">E</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">0</span><br><span class="line">9</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">map&lt;string, vector&lt;string&gt;&gt; jj; <span class="comment">// 管理结点 --&gt; 管理结点</span></span><br><span class="line">map&lt;string, vector&lt;string&gt;&gt; jl; <span class="comment">// 管理结点 --&gt; 老人</span></span><br><span class="line">map&lt;string, string&gt; lj; <span class="comment">// 老人 --&gt; 节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入一个递归函数，用于统计指定管理节点下的老人数量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countOldPeople</span><span class="params">(<span class="type">const</span> string&amp; node)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = jl[node].<span class="built_in">size</span>(); <span class="comment">// 当前节点下的老人数量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; i : jj[node]) &#123; <span class="comment">// 遍历所有子节点</span></span><br><span class="line">        sum += <span class="built_in">countOldPeople</span>(i); <span class="comment">// 递归统计子节点下的老人数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isNumeric</span><span class="params">(<span class="type">const</span> std::string&amp; str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">size_t</span> pos;</span><br><span class="line">        std::<span class="built_in">stod</span>(str, &amp;pos);</span><br><span class="line">        <span class="keyword">return</span> pos == str.<span class="built_in">length</span>(); <span class="comment">// 如果整个字符串都被解析，则说明是数值</span></span><br><span class="line">    &#125; <span class="built_in">catch</span> (...) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果转换失败，则说明不是数值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        string s1, s2; cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isNumeric</span>(s1)) &#123;</span><br><span class="line">            jj[s2].<span class="built_in">push_back</span>(s1); <span class="comment">// 修改了这里</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// s1数字</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (jj.<span class="built_in">find</span>(s2) != jj.<span class="built_in">end</span>())</span><br><span class="line">                jj[s2];</span><br><span class="line">            jl[s2].<span class="built_in">push_back</span>(s1);</span><br><span class="line">            lj[s1] = s2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string sa,sb,sc;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        cin &gt;&gt; sa;</span><br><span class="line">        <span class="keyword">if</span> (sa == <span class="string">&quot;E&quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (sa == <span class="string">&quot;T&quot;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; sb &gt;&gt; sc;</span><br><span class="line">            string valueToRemove = sb;</span><br><span class="line">            jl[lj[sb]].<span class="built_in">erase</span>(<span class="built_in">remove</span>(jl[lj[sb]].<span class="built_in">begin</span>(), jl[lj[sb]].<span class="built_in">end</span>(), valueToRemove), jl[lj[sb]].<span class="built_in">end</span>());</span><br><span class="line">            jl[sc].<span class="built_in">push_back</span>(sb);</span><br><span class="line">            lj[sb] = sc;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; sb;<span class="comment">//管理结点</span></span><br><span class="line">            cout &lt;&lt; <span class="built_in">countOldPeople</span>(sb) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯第15届模拟赛</title>
      <link href="/2023/11/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AC%AC15%E5%B1%8A%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
      <url>/2023/11/14/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%AC%AC15%E5%B1%8A%E6%A8%A1%E6%8B%9F%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="最小的16进制数"><a href="#最小的16进制数" class="headerlink" title="最小的16进制数"></a>最小的16进制数</h1><blockquote><p>问题描述<br>　　请找到一个大于 2022 的最小数，这个数转换成十六进制之后，所有的数位（不含前导 0）都为字母（A 到 F）。<br>　　请将这个数的十进制形式作为答案提交</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到最小的16进制数</span></span><br><span class="line"><span class="comment">//进制的转换：10 --&gt; 16 进制</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2022</span>; i &lt;= <span class="number">1e9</span>; ++i) &#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;<span class="comment">//不是全字母</span></span><br><span class="line"><span class="type">int</span> b = i;<span class="comment">//b代表16进制的最地位</span></span><br><span class="line"><span class="type">int</span> yu = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (b) &#123;</span><br><span class="line">yu = b % <span class="number">16</span>;</span><br><span class="line"><span class="keyword">if</span> (yu &lt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="comment">//该位为数字</span></span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">b /= <span class="number">16</span>;<span class="comment">//除去一位</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ans) &#123;</span><br><span class="line"><span class="comment">//所有位为字母</span></span><br><span class="line">cout &lt;&lt; i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="日期的操作"><a href="#日期的操作" class="headerlink" title="日期的操作"></a>日期的操作</h1><blockquote><p>问题描述<br>对于一个日期，我们可以计算出年份的各个数位上的数字之和，也可以分别计算月和日的各位数字之和。请问从 1900 年 1 月 1 日至 9999 年 12 月 31 日，总共有多少天，年份的数位数字之和等于月的数位数字之和加日的数位数字之和。<br>例如，2022年11月13日满足要求，因为 2+0+2+2&#x3D;(1+1)+(1+3) 。<br>请提交满足条件的日期的总数量。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//相等日期，</span></span><br><span class="line"><span class="comment">//关键在于对于日期操作的熟练</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闰年的判断,每月的天数</span></span><br><span class="line"><span class="type">int</span> date[<span class="number">13</span>] = &#123; <span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getSum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (x) &#123;</span><br><span class="line">sum += x % <span class="number">10</span>;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1900</span>; i &lt;= <span class="number">9999</span>; ++i) &#123;</span><br><span class="line"><span class="type">int</span> leap_year = (i % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">100</span> != <span class="number">0</span>) || (i % <span class="number">400</span> == <span class="number">0</span>);<span class="comment">//闰年多一天</span></span><br><span class="line">date[<span class="number">2</span>] = (leap_year ? <span class="number">29</span> : <span class="number">28</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">12</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= date[j]; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">getSum</span>(i) == <span class="built_in">getSum</span>(j) + <span class="built_in">getSum</span>(k))res++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="求解最大联通块"><a href="#求解最大联通块" class="headerlink" title="求解最大联通块"></a>求解最大联通块</h1><blockquote><p>求下面矩阵中，相连1最大的块，1的个数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">010000000001010001101100000010010110001111100010101100011110</span><br><span class="line">001011101000100011111111111010000010010101010111001000010100</span><br><span class="line">101100001101011101101011011001000110111111010000000110110000</span><br><span class="line">010101100100010000111000100111100110001110111101010011001011</span><br><span class="line">010011011010011110111101111001001001010111110001101000100011</span><br><span class="line">101001011000110100001101011000000110110110100100110111101011</span><br><span class="line">101111000000101000111001100010110000100110001001000101011001</span><br><span class="line">001110111010001011110000001111100001010101001110011010101110</span><br><span class="line">001010101000110001011111001010111111100110000011011111101010</span><br><span class="line">011111100011001110100101001011110011000101011000100111001011</span><br><span class="line">011010001101011110011011111010111110010100101000110111010110</span><br><span class="line">001110000111100100101110001011101010001100010111110111011011</span><br><span class="line">111100001000001100010110101100111001001111100100110000001101</span><br><span class="line">001110010000000111011110000011000010101000111000000110101101</span><br><span class="line">100100011101011111001101001010011111110010111101000010000111</span><br><span class="line">110010100110101100001101111101010011000110101100000110001010</span><br><span class="line">110101101100001110000100010001001010100010110100100001000011</span><br><span class="line">100100000100001101010101001101000101101000000101111110001010</span><br><span class="line">101101011010101000111110110000110100000010011111111100110010</span><br><span class="line">101111000100000100011000010001011111001010010001010110001010</span><br><span class="line">001010001110101010000100010011101001010101101101010111100101</span><br><span class="line">001111110000101100010111111100000100101010000001011101100001</span><br><span class="line">101011110010000010010110000100001010011111100011011000110010</span><br><span class="line">011110010100011101100101111101000001011100001011010001110011</span><br><span class="line">000101000101000010010010110111000010101111001101100110011100</span><br><span class="line">100011100110011111000110011001111100001110110111001001000111</span><br><span class="line">111011000110001000110111011001011110010010010110101000011111</span><br><span class="line">011110011110110110011011001011010000100100101010110000010011</span><br><span class="line">010011110011100101010101111010001001001111101111101110011101</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求最大联通块</span></span><br><span class="line"><span class="comment">//dfs深度优先遍历</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">30</span> &amp;&amp; x &gt;= <span class="number">1</span> &amp;&amp; y &lt;= <span class="number">60</span> &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; a[x][y] == <span class="number">1</span> &amp;&amp; vis[x][y]==<span class="number">0</span>) &#123;</span><br><span class="line">vis[x][y] = <span class="number">1</span>;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="built_in">dfs</span>(x + <span class="number">1</span>, y);</span><br><span class="line"><span class="built_in">dfs</span>(x - <span class="number">1</span>, y);</span><br><span class="line"><span class="built_in">dfs</span>(x , y<span class="number">+1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(x , y<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">60</span>; ++j) &#123;</span><br><span class="line"><span class="type">char</span> tmp; cin &gt;&gt; tmp;</span><br><span class="line">a[i][j] =  tmp - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">60</span>; ++j) &#123;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (vis[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">dfs</span>(i, j);</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们来模拟一下dfs的过程：<br>从一个点出发，该点是需要没被访问过的（’0’），通过该点，判断该点是否是在范围内，是否被访问过，如果满足条件（没有访问过），进入该点，也表示该点现在被访问了，vis[x][y] &#x3D; 1，联通的个数+1（也就是a[i][j]为被联通的点），再依托该点，发散周围的4个点。</p><p>dfs求联通的点，是不需要清空vis[][]的，因为0点是不会进入到dfs中的。<br>可以对着图，模拟下过程。当一个联通块被访问完了（其vis[][]全部为1了），来访问下一个联通块时，它是不会受到其他联通块的影响，因为连通块之间用0分割。连通块和连通块不会连在一起。</p><h1 id="最大滑行距离"><a href="#最大滑行距离" class="headerlink" title="最大滑行距离"></a>最大滑行距离</h1><blockquote><p>问题描述<br>　　小蓝准备在一个空旷的场地里面滑行，这个场地的高度不一，小蓝用一个 n 行 m 列的矩阵来表示场地，矩阵中的数值表示场地的高度。<br>　　如果小蓝在某个位置，而他上、下、左、右中有一个位置的高度（严格）低于当前的高度，小蓝就可以滑过去，滑动距离为 1 。<br>　　如果小蓝在某个位置，而他上、下、左、右中所有位置的高度都大于等于当前的高度，小蓝的滑行就结束了。<br>　　小蓝不能滑出矩阵所表示的场地。<br>　　小蓝可以任意选择一个位置开始滑行，请问小蓝最多能滑行多远距离。<br>输入格式<br>　　输入第一行包含两个整数 n, m，用一个空格分隔。<br>　　接下来 n 行，每行包含 m 个整数，相邻整数之间用一个空格分隔，依次表示每个位置的高度。<br>输出格式<br>　　输出一行包含一个整数，表示答案。<br>样例输入<br>4 5<br>1 4 6 3 1<br>11 8 7 3 1<br>9 4 5 2 1<br>1 3 2 2 1<br>样例输出<br>7<br>样例说明<br>　　滑行的位置一次为 (2, 1), (2, 2), (2, 3), (3, 3), (3, 2), (4, 2), (4, 3)。<br>评测用例规模与约定<br>　　对于 30% 评测用例，1 &lt;&#x3D; n &lt;&#x3D; 20，1 &lt;&#x3D; m &lt;&#x3D; 20，0 &lt;&#x3D; 高度 &lt;&#x3D; 100。<br>　　对于所有评测用例，1 &lt;&#x3D; n &lt;&#x3D; 100，1 &lt;&#x3D; m &lt;&#x3D; 100，0</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一眼dfs</span></span><br><span class="line"><span class="comment">//对每个点进行dfs,求最大的路径\</span></span><br><span class="line"><span class="comment">//dp + dfs</span></span><br><span class="line"><span class="comment">//dfs(i, j) 代表：点（i，j）为起点的最大滑行长度。</span></span><br><span class="line"><span class="comment">//不需要vis ，因为一定不会走原路返回，判断走的条件，就是要求高度小于</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">5</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">5</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="type">int</span> t1 = x + dx[i];</span><br><span class="line"><span class="type">int</span> t2 = y + dy[i];</span><br><span class="line"><span class="keyword">if</span> (t1 &gt;= <span class="number">1</span> &amp;&amp; t1 &lt;= n &amp;&amp; t2 &gt;= <span class="number">1</span> &amp;&amp; t2 &lt;= m &amp;&amp; a[x][y] &gt; a[t1][t2] ) &#123;<span class="comment">//不需要vis</span></span><br><span class="line">res = <span class="built_in">max</span>(<span class="built_in">dfs</span>(t1, t2) + <span class="number">1</span>,res);<span class="comment">//关键的dp//三条线路中，取最大的。//可以记忆dfs(t1,t2)，优化搜索次数。</span></span><br><span class="line"><span class="comment">//不然每次都要递归得回溯原来算过的dfs(i,j);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans, <span class="built_in">dfs</span>(i, j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><blockquote><p>给定每日温度的列表，对于每一天，找到在未来的哪一天温度会升高。如果没有将来的日子温度升高，则将该天的值设为0</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单调栈</span></span><br><span class="line"><span class="comment">//对于每个元素，求大于它的第一个最大元素的距离</span></span><br><span class="line"><span class="comment">//例：73，向右找到第一个大于它的元素（74）距离为1</span></span><br><span class="line"><span class="comment">//双重for循环 O(n^2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用单调栈：求第一个大于该元素的位置。</span></span><br><span class="line"></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;<span class="comment">//放下标index</span></span><br><span class="line"><span class="comment">//栈顶的元素保持最小。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">9</span>] = &#123; <span class="number">73</span>,<span class="number">74</span>,<span class="number">75</span>,<span class="number">71</span>,<span class="number">69</span>,<span class="number">69</span>,<span class="number">72</span>,<span class="number">76</span>,<span class="number">73</span> &#125;;</span><br><span class="line"><span class="type">int</span> res[<span class="number">9</span>];<span class="comment">//放距离distance</span></span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; a[s.<span class="built_in">top</span>()]) &#123;</span><br><span class="line"><span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; a[i]&gt;a[s.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">res[s.<span class="built_in">top</span>()] = i - s.<span class="built_in">top</span>();</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">s.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">s.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">res[s.<span class="built_in">top</span>()] = <span class="number">0</span>;</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">8</span>; ++i)</span><br><span class="line">cout &lt;&lt; res[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><p><img src="/./pic/%E7%BA%BF%E6%AE%B5%E6%A0%91.png"><br><img src="/./pic/build_tree.png"><br><img src="/./pic/tree.png"></p><p><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1cb411t7AM/?spm_id_from=333.788.recommend_more_video.2&vd_source=cd15ef71fe6f4187af03b74e20f12fab">详细视频讲解</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线段树</span></span><br><span class="line"><span class="comment">//一段和  &amp;&amp; 更新某个值   时间复杂度 o(logN)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过start到end区间的a构建从根节点node的树tree，</span></span><br><span class="line"><span class="comment">//易错：需要分区是tree的下标还是a的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过递归遍历树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build_tree</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> tree[], <span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">tree[node] = a[start];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> left = <span class="number">2</span> * node + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> right = <span class="number">2</span> * node + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">build_tree</span>(a, tree, left, start, mid);</span><br><span class="line"><span class="built_in">build_tree</span>(a, tree, right, mid + <span class="number">1</span>, end);</span><br><span class="line">tree[node] = tree[left] + tree[right];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更改为a[idx]=val</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> tree[], <span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> idx, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">a[idx] = val;</span><br><span class="line">tree[node] = val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> left_node = <span class="number">2</span> * node + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> right_node = <span class="number">2</span> * node + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (idx &gt;= start &amp;&amp; idx &lt;= mid)</span><br><span class="line"><span class="built_in">update</span>(a, tree, left_node, start, mid, idx, val);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">update</span>(a, tree, right_node, mid<span class="number">+1</span>, end, idx, val);</span><br><span class="line">tree[node] = tree[left_node] + tree[right_node];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算区间a[L--R]的和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_tree</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> tree[], <span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="comment">//递归出口</span></span><br><span class="line"><span class="keyword">if</span> (start == end) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[node];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//减枝（如果不，退化成O(n)）</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (R&lt;start || L&gt;end) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//不在区间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (L &lt;= start &amp;&amp; end &lt;= R) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[node];<span class="comment">//在区间的内部，直接返回和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> left_node = <span class="number">2</span> * node + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> right_node = <span class="number">2</span> * node + <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> sum_left = <span class="built_in">query_tree</span>(a, tree, left_node, start, mid, L, R);</span><br><span class="line"><span class="type">int</span> sum_right = <span class="built_in">query_tree</span>(a, tree, right_node, mid + <span class="number">1</span>, end, L, R);</span><br><span class="line"><span class="keyword">return</span> sum_left + sum_right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span> &#125;;</span><br><span class="line"><span class="type">int</span> n = <span class="number">6</span>;</span><br><span class="line"><span class="type">int</span> tree[N] = &#123;<span class="number">0</span>&#125;;<span class="comment">//树的结构类似是完全二叉树和平衡二叉树 ==》使用数组存储</span></span><br><span class="line"><span class="built_in">build_tree</span>(a, tree, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i)cout &lt;&lt; tree[i] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">update</span>(a, tree, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; ++i)cout &lt;&lt; tree[i] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">query_tree</span>(a, tree, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">5</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="LCS"><a href="#LCS" class="headerlink" title="LCS"></a>LCS</h1><blockquote><p>任务描述<br>本关任务：找出最接近的相似串。<br>一般情况下，度量两个串S1和S2的相似性，可以通过从一个串变换成另一个串所需要的最少操作次数来衡量，需要的操作次数越少，则越相似。<br>假设从一个串变化成另一个串所允许的操作只有两种：插入一个字符或者删除一个字符。无论是插入还是删除一个符号，均算作一次操作。<br>现给你一个串S，和一个串的集合T，让你找出集合T中与S最相似的串。<br>编程要求<br>右侧编辑器中有一个函数Similar，请在这个函数中读取数据完成任务。<br>输入数据由学员处理。输入的第一行为一个串S，第二行是一个整数n，范围0 &lt; n &lt; 20，表示接下来集合T中的串的个数。接下来n行，每行为一个串。<br>注：所有字符串的长度不超过50。<br>请输出T中与S最相似的串，如果有多个就输出多个串（按照输入时的顺序），每个串占一行。具体见测试说明。<br>测试说明<br>平台会对你编写的代码进行测试：<br>测试输入：<br>abcd<br>4<br>abd<br>abdc<br>abed<br>aebcd<br>预期输出：<br>abd<br>aebcd<br>提示：<br>对于第一个串abd，在b后插入一个c就可以变成abcd，操作次数为1次。<br>第二个串abdc，删除d后面的c，在d前面增加一个c，即可变成abcd，操作次数为2次。<br>第三个串abed，删除d前面的e，在d前面增加一个c，即可变成abcd，操作次数为2次。<br>第四个串aebcd，删除a后面的e即可变成abcd，操作次数为1次。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求字符串a,b的相似度</span></span><br><span class="line"><span class="comment">//最长公共子序列</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCS</span><span class="params">(<span class="type">char</span>* a, <span class="type">char</span>* b)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a_str = <span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="type">int</span> b_str = <span class="built_in">strlen</span>(b);</span><br><span class="line"><span class="type">int</span> dp[N][N] = &#123; <span class="number">0</span> &#125;;<span class="comment">//dp[i][j]：a[0--i]与b[0--j]的最长公共子串</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= a_str; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= b_str; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) &#123;<span class="comment">//当前加入的元素相等,公共长度+1</span></span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//不相等就不加入（不加入横排的还是纵排的）</span></span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[a_str][b_str];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> s[N]; cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"><span class="type">char</span> t[N][N];</span><br><span class="line"><span class="type">int</span> ans[N];<span class="comment">//每个T[i]字符串与s的相似度</span></span><br><span class="line"><span class="comment">//字符串的读取方式，每行即可。</span></span><br><span class="line"><span class="type">int</span> res[N]; <span class="type">int</span> k; <span class="type">int</span> minl = <span class="number">10000</span>;<span class="comment">//res放最小值的index</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)cin &gt;&gt; t[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="comment">//调整相似度的计算公式</span></span><br><span class="line"><span class="comment">//s字符串调整步数 + t[i]调整步数</span></span><br><span class="line">ans[i] = <span class="built_in">strlen</span>(s) + <span class="built_in">strlen</span>(t[i]) - <span class="number">2</span> * <span class="built_in">LCS</span>(s, t[i]);</span><br><span class="line"><span class="comment">// eg:1 2 2 1  将最小的数都收集出来，k很巧妙</span></span><br><span class="line"><span class="keyword">if</span> (minl &gt; ans[i]) &#123;</span><br><span class="line">minl = ans[i]; k = <span class="number">0</span>;<span class="comment">//更新k</span></span><br><span class="line">res[k] = i;<span class="comment">//找到最小的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (minl == ans[i]) &#123;</span><br><span class="line">res[++k] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; ++i) cout &lt;&lt; t[res[i]]&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于LCS的一个例子<br>abcd与abdc 最大公共子序列为3</p><table><thead><tr><th></th><th>0</th><th>a</th><th>b</th><th>c</th><th>d</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>a</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>b</td><td>0</td><td>1</td><td>2</td><td></td><td></td></tr><tr><td>d</td><td>0</td><td></td><td></td><td></td><td></td></tr><tr><td>c</td><td>0</td><td></td><td></td><td></td><td></td></tr></tbody></table><ul><li><p>a与a相等，在没有它俩时候的LCS + 1</p></li><li><p>a与b不等，在没有a时，和没有b时的最大LCS</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>google</title>
      <link href="/2023/11/04/google/"/>
      <url>/2023/11/04/google/</url>
      
        <content type="html"><![CDATA[<p>以下是一些Google搜索技巧，可以帮助你更好地定位你所需要的信息：</p><ol><li><p>使用引号：” “ - 使用双引号将搜索词或短语括起来，以精确匹配这些词语。例如，”人工智能” 将只返回包含这个短语的页面。</p></li><li><p>排除词：- - 在搜索词前加上减号（-）来排除特定词汇。例如，若要搜索苹果公司但不包括果树相关信息，可以输入”苹果 -果树”。</p></li><li><p>站点限定搜索：site: - 使用 “site:” 后面加上网站域名，可以限制搜索结果只在该网站内显示。例如，”site:wikipedia.org 量子力学” 将在维基百科网站内搜索量子力学相关信息。</p></li><li><p>文件类型过滤：filetype: - 使用 “filetype:” 后面加上文件类型，可以过滤搜索结果中的特定文件类型。例如，”filetype:pdf 技术白皮书” 只会返回PDF文件格式的技术白皮书。</p></li><li><p>相关词搜索：related: - 使用 “related:” 后面加上网站的域名，可以查找与该网站相关的其他网站。例如，”related:nytimes.com 新闻” 可以列出与纽约时报相关的其他新闻网站。</p></li><li><p>指定范围：.. - 使用两个连续的句号来指定一个数字范围，用于价格、日期等搜索。例如，”2020..2022 年度报告” 将搜索介于2020年和2022年之间的年度报告。</p></li><li><p>定义词汇：define: - 使用 “define:” 后面加上单词，可以获取该词的定义。例如，”define:技术” 将显示技术这个词的含义。</p></li><li><p>时间范围限定：daterange: - 使用 “daterange:” 后面加上起始日期和结束日期，可以限定搜索结果的发布日期范围。例如，”daterange:2022-01-01..2022-12-31 人工智能” 将搜索2022年内与人工智能相关的信息。</p></li><li><p>模糊搜索：* - 使用星号（*）作为通配符来代替缺失的词或词尾。例如，”忍者 * 忍术” 可以找到与忍者和忍术相关的各种组合。</p></li><li><p>特定文件搜索：intitle: 和 inurl: - 使用 “intitle:” 后面加上关键词，可以限制搜索结果中标题包含该关键词的页面。使用 “inurl:” 后面加上关键词，可以限制搜索结果中URL包含该关键词的页面。</p></li></ol><p>这些技巧可以帮助你更精确地找到所需的信息，提高你的搜索效率。根据你的需求，你可以组合和使用这些技巧来获取最佳的搜索结果。</p><p>当使用Google进行搜索时，以下是一些常用的搜索技巧和操作符，可以帮助你更精确地找到你需要的信息：</p><ol><li><p>引号搜索：使用双引号将搜索词或短语括起来，可以搜索完全匹配的结果。例如：”openAI GPT-3”。</p></li><li><p>排除词搜索：使用减号符号（-）排除特定的词或短语。例如：Python -snake。</p></li><li><p>OR 操作符：使用 OR（大写）或竖线符号（|）来搜索多个词或短语中的任意一个。例如：Python OR Java。</p></li><li><p>网站限定搜索：使用 “site:” 后跟特定网站的域名，可以限定搜索结果只在该网站内进行。例如：site:wikipedia.org AI。</p></li><li><p>文件类型搜索：使用 “filetype:” 后跟特定的文件扩展名，可以搜索特定类型的文件。例如：filetype:pdf machine learning。</p></li><li><p>相关搜索：在搜索结果页面中，点击某个搜索结果下方的”相关搜索”链接，可以获得与该搜索结果相关的其他搜索建议。</p></li><li><p>数字范围搜索：使用两个点（..）表示数字范围，可以搜索特定范围内的数字。例如：iPhone 11..13。</p></li><li><p>单词的含义：使用 “define:” 后跟单词，可以获得该单词的定义和解释。例如：define:algorithm。</p></li><li><p>单词的同义词：使用符号波浪号（<del>）前缀，可以搜索与给定词具有相关意义的同义词。例如：</del>fast food。</p></li><li><p>时间范围搜索：在搜索工具栏中选择特定的时间范围，可以限定搜索结果在该时间范围内更新的内容。</p></li></ol><p>这些是一些常用的Google搜索技巧和操作符，可以帮助你更有效地搜索所需的信息。记住，不同的搜索技巧可以组合使用，以获得更精确和有针对性的搜索结果。</p><p>当使用Google进行搜索时，还有一些其他的技巧和操作符可以帮助你更好地利用搜索引擎：</p><ol><li><p>省略词搜索：使用省略号（…）来表示在短语中省略的部分。例如：”A journey of a thousand miles begins with…”。</p></li><li><p>搜索特定网页标题：使用 “intitle:” 后跟你想要搜索的特定网页标题关键词。例如：intitle:”Python tutorial”。</p></li><li><p>搜索特定网页 URL：使用 “inurl:” 后跟你想要搜索的特定网页 URL 关键词。例如：inurl:blog。</p></li><li><p>搜索特定文件名：使用 “intitle:” 后跟你想要搜索的特定文件名关键词。例如：intitle:”index.html”。</p></li><li><p>相关网页搜索：使用 “related:” 后跟特定网页的 URL，可以找到与该网页相关的其他网页。例如：related:<a target="_blank" rel="noopener" href="http://www.example.com./">www.example.com。</a></p></li><li><p>搜索特定文件类型：使用 “filetype:” 后跟特定的文件扩展名，可以搜索特定类型的文件。例如：filetype:docx。</p></li><li><p>定义数字单位：使用 “convert” 关键词，可以将一个数字单位转换成另一个。例如：”10 dollars to euros”。</p></li><li><p>搜索特定类型的信息：使用 “info:” 后跟特定的主题关键词，可以获得与该主题相关的详细信息。例如：info:artificial intelligence。</p></li><li><p>搜索特定时间段内的新闻：使用 “after:” 或 “before:” 后跟特定日期，可以搜索在该日期之后或之前发布的新闻。例如：”AI advancements after:2022-01-01”。</p></li><li><p>搜索范围限定：使用两个点（..）表示范围，可以限定搜索结果在特定范围内的数值、日期等。例如：”best laptops $500..$1000”。</p></li></ol><p>这些技巧和操作符可以帮助你更精确地搜索特定的信息，提供更有价值的搜索结果。记住，Google搜索引擎不断更新和改进，因此建议时常关注新的搜索功能和技巧。</p><p>当然！这里还有一些其他的Google搜索技巧和操作符供你参考：</p><ol><li><p>搜索特定文件类型的内容：使用 “intext:” 后跟关键词，可以搜索特定文件类型中包含该关键词的内容。例如：intext:”machine learning” filetype:pdf。</p></li><li><p>搜索相关网页的链接：使用 “link:” 后跟特定网页的 URL，可以找到与该网页相关的其他网页链接。例如：link:<a target="_blank" rel="noopener" href="http://www.example.com./">www.example.com。</a></p></li><li><p>搜索特定网站的内部页面：使用 “site:” 后跟特定网站的域名和特定关键词，可以搜索该网站内包含该关键词的页面。例如：site:wikipedia.org AI。</p></li><li><p>搜索特定作者的内容：使用 “author:” 后跟特定作者的姓名，可以搜索该作者发布的内容。例如：author:”John Doe”。</p></li><li><p>搜索特定文件的标题或内容：使用 “allintitle:” 或 “allintext:” 后跟关键词，可以搜索标题或内容中包含所有给定关键词的文件。例如：allintitle:”Python tutorial”.</p></li><li><p>搜索特定网站的缓存页面：使用 “cache:” 后跟特定网页的 URL，可以查看该网页的缓存版本。例如：cache:<a target="_blank" rel="noopener" href="http://www.example.com./">www.example.com。</a></p></li><li><p>搜索相关图片：在Google搜索页面上，点击图片搜索按钮，可以搜索与特定关键词相关的图片。</p></li><li><p>搜索特定语言的结果：使用 “lang:” 后跟特定语言代码，可以限定搜索结果为特定语言的内容。例如：machine learning lang:en。</p></li><li><p>搜索特定文件大小的文件：使用 “size:” 后跟特定文件大小，可以搜索特定大小的文件。例如：filetype:pdf size:1MB。</p></li><li><p>搜索特定领域的结果：使用 “in” 后跟特定领域的名称，可以搜索与该领域相关的内容。例如：”artificial intelligence” in:news。</p></li></ol><p>这些技巧和操作符可以帮助你更加精确地搜索特定的信息，提供更有针对性的搜索结果。尝试结合使用这些技巧，以获得更好的搜索体验和结果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>侯捷C++学习</title>
      <link href="/2023/10/26/%E4%BE%AF%E6%8D%B7C++%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/10/26/%E4%BE%AF%E6%8D%B7C++%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Big-Three-三个特殊函数"><a href="#Big-Three-三个特殊函数" class="headerlink" title="Big Three 三个特殊函数"></a>Big Three 三个特殊函数</h2><p>类 带 指针<br>string类<br>new 出来的对象需要手动删除</p><p>class with pointer member 必须有拷贝构造和拷贝赋值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">a</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">b</span><span class="params">(<span class="string">&quot;World&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//a ,b 本质上是一个指针（一个该类型的指针大小的空间），它指向了内存中一连串的内容（更大的空间）</span></span><br><span class="line"></span><br><span class="line">    b  =  a;</span><br><span class="line">    <span class="comment">//如果不提供拷贝赋值（重载等于号） 系统会默认一个字节，一个字节得赋值</span></span><br><span class="line">    <span class="comment">//在此除，造成得后果是，b 和 a 指向了同一内容（a指向得），而b 原先指向得内容 没有指针指向，造成 memory leak 内存泄漏</span></span><br><span class="line">    <span class="comment">//如果更改a ，那么也会更改b </span></span><br><span class="line">    <span class="comment">//这叫做浅拷贝</span></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><img src="/./pic/memory_leak.png"></p><p><code>浅拷贝</code> : 拷贝指针</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT</title>
      <link href="/2023/10/24/QT/"/>
      <url>/2023/10/24/QT/</url>
      
        <content type="html"><![CDATA[<p>QT的学习:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//argc 命令行变量的数量 argv命令行变量的数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//QApplication 在qt中有且仅有一个</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">//窗口对象，w extends QMainWindow ,QMainWindow extends QWidget</span></span><br><span class="line">    MainWindow w;</span><br><span class="line"></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息循环（只有点×，退出消息循环）</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对象树：<br><img src="/./pic/object_tree.png"></p><p>析构的顺序和构造顺序相反。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MyPushButton::<span class="built_in">MyPushButton</span>(QWidget *parent) : <span class="built_in">QPushButton</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;my push button constructor &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPushButton::~<span class="built_in">MyPushButton</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;my push botton 析构函数&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">my push button constructor</span><br><span class="line">my push botton 析构函数</span><br></pre></td></tr></table></figure><p>如果创建对象new在堆区的时候，指定父亲位QObject 派生下来的类，则可以不用管理内存的释放,会将对象放在对象树种，</p><p>简化了内存的回收机制</p><p>Qt中坐标:<br>左上角为(0,0)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷第八期</title>
      <link href="/2023/10/24/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E5%85%AB%E6%9C%9F/"/>
      <url>/2023/10/24/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E5%85%AB%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="攻击火星-模拟"><a href="#攻击火星-模拟" class="headerlink" title="攻击火星(模拟)"></a>攻击火星(模拟)</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一群外星人将要攻击火星。</p><p>火星的地图是一个 $n$ 个点的无向图。这伙外星人将按照如下方法入侵，先攻击度为 $0$ 的点（相当于从图中删除掉它），然后是度为 $1$ 的点，依此类推直到度为 $n-1$ 的点。</p><p>所有的点度统计是动态统计的。（一个点删掉后，与之相连的点的点度都会 $-1$）。外星人攻击度为某个数的点时是同时攻击的。</p><p>你需要设计这个图的边的方案来使得未被攻击的点最多。注意：你设计的图<strong>不允许自环及重边</strong>。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入文件包含一行一个整数 $n$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个整数，表示最多的最后未被攻击的点。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【样例解释】</p><p>一种可能的方案是 $1\leftrightarrow 2\leftrightarrow 3$，这样首先删掉度为 $1$ 的点 $1$ 和点 $3$，此时点 $2$ 度数为 $0$，不会被删去。</p><p>【数据范围】</p><ul><li>对于 $20%$ 的数据 $1\le n\le 10$；</li><li>对于 $100%$ 的数据 $1\le n\le 5\times 10^4$。</li></ul><p>【题目来源】</p><p>tinylic改编</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>) cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> cout&lt;&lt;n<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="亲戚（并查集）"><a href="#亲戚（并查集）" class="headerlink" title="亲戚（并查集）"></a>亲戚（并查集）</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>规定：$x$ 和 $y$ 是亲戚，$y$ 和 $z$ 是亲戚，那么 $x$ 和 $z$ 也是亲戚。如果 $x$，$y$ 是亲戚，那么 $x$ 的亲戚都是 $y$ 的亲戚，$y$ 的亲戚也都是 $x$ 的亲戚。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行：三个整数 $n,m,p$，（$n,m,p \le 5000$），分别表示有 $n$ 个人，$m$ 个亲戚关系，询问 $p$ 对亲戚关系。</p><p>以下 $m$ 行：每行两个数 $M_i$，$M_j$，$1 \le M_i,~M_j\le n$，表示 $M_i$ 和 $M_j$ 具有亲戚关系。</p><p>接下来 $p$ 行：每行两个数 $P_i,P_j$，询问 $P_i$ 和 $P_j$ 是否具有亲戚关系。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>$p$ 行，每行一个 <code>Yes</code> 或 <code>No</code>。表示第 $i$ 个询问的答案为“具有”或“不具有”亲戚关系。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6 5 3</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">3 4</span><br><span class="line">5 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">5 6</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N= <span class="number">2e5</span><span class="number">+5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//并查集，看是否有同一个祖节点，是否在一个集合中</span></span><br><span class="line"><span class="comment">//在一个集合则为亲戚，否为不是亲戚。</span></span><br><span class="line"><span class="type">int</span> gf[<span class="number">10001</span>];</span><br><span class="line"><span class="comment">//gf[i] = 1 节点 i 的父节点为 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findgf</span><span class="params">(<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(gf[t] == t) <span class="keyword">return</span> t;<span class="comment">//祖节点就是它本身</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">gf[t] = <span class="built_in">findgf</span>(gf[t]);<span class="comment">//路径压缩:找它祖节点的祖结点。</span></span><br><span class="line"><span class="keyword">return</span> gf[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">findgf</span>(a);</span><br><span class="line"><span class="type">int</span> y = <span class="built_in">findgf</span>(b);</span><br><span class="line">gf[x] = y;</span><br><span class="line"><span class="comment">//将它两的父节点合并</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m,p;cin&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line"><span class="comment">//初始化各各节点的祖结点为自身</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)gf[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="type">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="built_in">merge</span>(a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p--)&#123;</span><br><span class="line"><span class="type">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">findgf</span>(x) == <span class="built_in">findgf</span>(y))</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哥德巴赫猜想（升级版）-筛数，素数判断"><a href="#哥德巴赫猜想（升级版）-筛数，素数判断" class="headerlink" title="哥德巴赫猜想（升级版）(筛数，素数判断)"></a>哥德巴赫猜想（升级版）(筛数，素数判断)</h1><h2 id="题目背景-1"><a href="#题目背景-1" class="headerlink" title="题目背景"></a>题目背景</h2><p>1742 年 6 月 7 日，哥德巴赫写信给当时的大数学家欧拉，正式提出了以下的猜想：任何一个大于 $9$ 的奇数都可以表示成 $3$ 个质数之和。质数是指除了 $1$ 和本身之外没有其他约数的数，如 $2$ 和 $11$ 都是质数，而 $6$ 不是质数，因为 $6$ 除了约数 $1$ 和 $6$ 之外还有约数 $2$ 和 $3$。<strong>需要特别说明的是 $1$ 不是质数。</strong></p><p>这就是哥德巴赫猜想。欧拉在回信中说，他相信这个猜想是正确的，但他不能证明。</p><p>从此，这道数学难题引起了几乎所有数学家的注意。哥德巴赫猜想由此成为数学皇冠上一颗可望不可及的“明珠”。</p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>现在请你编一个程序验证哥德巴赫猜想。</p><p>先给出一个奇数 $n$，要求输出 $3$ 个质数，这 $3$ 个质数之和等于输入的奇数。</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>仅有一行，包含一个正奇数 $n$，其中 $9 &lt; n &lt; 20000$。</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>仅有一行，输出 $3$ 个质数，这 $3$ 个质数之和等于输入的奇数。相邻两个质数之间用一个空格隔开，最后一个质数后面没有空格。如果表示方法不唯一，请输出第一个质数最小的方案，如果第一个质数最小的方案不唯一，请输出第一个质数最小的同时，第二个质数最小的方案。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2009</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 3 2003</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N= <span class="number">2e5</span><span class="number">+5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> vis[N];<span class="comment">//vis[i] = 1第i数素数</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; prime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i*i&lt;=a;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(a%i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//筛出0--20000中间所有素数</span></span><br><span class="line"><span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;=<span class="number">20000</span>;++i)&#123;</span><br><span class="line">vis[i] = <span class="built_in">isPrime</span>(i);</span><br><span class="line"><span class="keyword">if</span>(vis[i]) prime.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> &amp; i:prime)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> &amp; j : prime)&#123;</span><br><span class="line"><span class="type">int</span> sub = n - i - j;</span><br><span class="line"><span class="keyword">if</span>(vis[sub] &amp;&amp; sub &gt; <span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;sub;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="B进制星球-高精度加法，进制，加法"><a href="#B进制星球-高精度加法，进制，加法" class="headerlink" title="B进制星球(高精度加法，进制，加法)"></a>B进制星球(高精度加法，进制，加法)</h1><h2 id="题目背景-2"><a href="#题目背景-2" class="headerlink" title="题目背景"></a>题目背景</h2><p>进制题目，而且还是个计算器~~</p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>话说有一天，小 Z 乘坐宇宙飞船，飞到一个美丽的星球。因为历史的原因，科技在这个美丽的星球上并不很发达，星球上人们普遍采用 $B\ (2 \le B \le 36)$ 进制计数。星球上的人们用美味的食物招待了小 Z，作为回报，小 Z 希望送一个能够完成 $B$ 进制加法的计算器给他们。现在小 Z 希望你可以帮助他，编写实现 $B$ 进制加法的程序。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>数据数据共三行。</p><p>第一行，一个十进制的整数，表示进制 $B$；</p><p>第二行和第三行，每行一个 $B$ 进制数正整数。数字的每一位属于 ${\tt 0,1,2,3,4,5,6,7,8,9,A,B\cdots}$。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个 $B$ 进制数，表示输入的两个数的和。</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">123</span><br><span class="line">321</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1110</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><h3 id="数据范围及约定"><a href="#数据范围及约定" class="headerlink" title="数据范围及约定"></a>数据范围及约定</h3><p>记 $n,m$ 分别表示两个 $B$ 进制数字的长度。</p><p>对于全部数据，$1\le n,m\le 2000$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该文体其实很简单</span></span><br><span class="line"><span class="comment">//高精度数据的存储，字符数组的转换，高精度模拟加法</span></span><br><span class="line"><span class="type">char</span> s[N],s2[N];</span><br><span class="line"><span class="type">int</span> a[N],b[N];</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> ch[] = <span class="string">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> B;cin&gt;&gt;B;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i]&lt;=<span class="string">&#x27;9&#x27;</span>) a[i] = s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> a[i] = s[i] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;<span class="comment">//为字母时的操作，记得+10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(a,a+n);<span class="comment">//个位放在数组前面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cin &gt;&gt; s2;</span><br><span class="line"><span class="type">int</span> m = <span class="built_in">strlen</span>(s2);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;++i) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s2[i]&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; s2[i]&lt;=<span class="string">&#x27;9&#x27;</span>) b[i] = s2[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> b[i] = s2[i] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;<span class="comment">//为字母时的操作，记得+10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(b,b+m);</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟高精度的加法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="built_in">max</span>(n,m);++i)&#123;</span><br><span class="line">a[i] += b[i];</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=B)<span class="comment">//进位</span></span><br><span class="line">&#123;</span><br><span class="line">a[i<span class="number">+1</span>] += a[i] / B;<span class="comment">//除法，表示进位，进了几个B</span></span><br><span class="line">a[i] %= B;<span class="comment">//进位后，剩余的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//防止最高位为0</span></span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">max</span>(n,m);i&gt;=<span class="number">0</span>;--i)&#123;<span class="comment">//多一位</span></span><br><span class="line"><span class="keyword">if</span>(a[i]) flag = <span class="literal">true</span>;<span class="comment">//从最高位往下走，第一个不是0的。</span></span><br><span class="line"><span class="keyword">if</span>(flag) cout&lt;&lt;ch[a[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结算日-模拟"><a href="#结算日-模拟" class="headerlink" title="结算日(模拟)"></a>结算日(模拟)</h1><h2 id="题目背景-3"><a href="#题目背景-3" class="headerlink" title="题目背景"></a>题目背景</h2><p>借债还债</p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>“不放债不借债”，贝西多么希望自己可以遵循这个忠告。她已经和她的 $N(1 \leq N \leq 100,000)$ 个朋友有了债务关系，或者借债了，或者放债了。她的 $N$ 个朋友依次标号为 $1\dots N$。 结算日终于来临了。她知道，朋友欠她的钱比她欠朋友的钱多。她的朋友们分布在一条直线上，第 $i$ 头奶牛站的位置距离谷仓 $i$ 米。贝西打算沿着这条直线行走，从欠她钱的奶牛手里收钱回来，并且还钱给她欠钱的奶牛。 当她沿直线移动的时候，她可以要求任何欠她钱的奶牛还全部的钱。当她有足够的钱可以还清她的某个债，就可以把钱给对应的奶牛还清她的债。奶牛 $i$ 欠贝西 $D_i$ 元 $(-1,000 \leq D_i \leq 1,000,D_i \neq 0)$，负数表示贝西欠奶牛 $i$ 钱。 贝西从谷仓出发，位置为 $0$，初始贝西没有钱。贝西收回她的所有借债，并且还清她的欠债所需行走的最短距离是多少？注意：她必须在最后一头奶牛所在的位置，完成她的行走。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行，一个整数 $N$ </p><p>接下来第 $2 \dots N+1$ 行，第 $i+1$ 行包含一个整数 $D_i$</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，贝西收回借债并且还清欠债，所需要行走的最短距离（单位为米）</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">100</span><br><span class="line">-200</span><br><span class="line">250</span><br><span class="line">-200</span><br><span class="line">200</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><p>输入解释：</p><p>$3$ 头奶牛欠贝西钱；她欠 $2$ 头奶牛钱。当她完成结算，她将有 $150$ 元。</p><p>输出解释：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">谷仓  <span class="number">100</span>  <span class="number">-200</span>  <span class="number">250</span> <span class="number">-200</span>  <span class="number">200</span></span><br><span class="line"> |     |     |    |    |    |</span><br><span class="line"> ***&gt;**+**&gt;*****&gt;**+</span><br><span class="line">                   *            &lt; 贝西有 <span class="number">350</span>元</span><br><span class="line">             -**&lt;***</span><br><span class="line">             *                  &lt; 贝西有 <span class="number">150</span>元</span><br><span class="line">             ***&gt;****&gt;****&gt;**+</span><br><span class="line">                             *  &lt; 贝西有 <span class="number">350</span></span><br><span class="line">                       -**&lt;***</span><br><span class="line">                       *     </span><br><span class="line">                       ***&gt;***  &lt; 贝西结束她的行走，有 <span class="number">150</span>元</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>,x=<span class="number">0</span>,res=<span class="number">0</span>,l;<span class="comment">//l代表欠债的位置</span></span><br><span class="line"><span class="type">bool</span> flag =<span class="number">0</span>;<span class="comment">//欠债</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">sum+=x;res++;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;=<span class="number">0</span>&amp;&amp;flag)&#123;</span><br><span class="line"><span class="comment">//有钱就回去还(来回),以前是欠债的</span></span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">res += (i-l)*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum&lt;<span class="number">0</span> &amp;&amp; !flag)&#123;</span><br><span class="line"><span class="comment">//欠债了(原来没欠债)</span></span><br><span class="line">l = i;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2023/10/23/docker/"/>
      <url>/2023/10/23/docker/</url>
      
        <content type="html"><![CDATA[<p>学习 docker 使用</p>]]></content>
      
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>algorithm</title>
      <link href="/2023/10/19/algorithm/"/>
      <url>/2023/10/19/algorithm/</url>
      
        <content type="html"><![CDATA[<h3 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N= <span class="number">2e5</span><span class="number">+5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BFS 广度搜索</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">1 1 2 1</span></span><br><span class="line"><span class="comment">1 1 1 1</span></span><br><span class="line"><span class="comment">1 1 2 1</span></span><br><span class="line"><span class="comment">1 2 1 1</span></span><br><span class="line"><span class="comment">1 1 1 2</span></span><br><span class="line"><span class="comment">1 1 4 3 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,step;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> v[<span class="number">101</span>][<span class="number">101</span>];<span class="comment">//是否访问过</span></span><br><span class="line"><span class="type">int</span> map[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">queue&lt;point&gt; q;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m,n;cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line">cin&gt;&gt;map[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> startx,starty,endx,endy;cin&gt;&gt;startx&gt;&gt;starty&gt;&gt;endx&gt;&gt;endy;</span><br><span class="line">point sp;</span><br><span class="line">sp.x = startx;</span><br><span class="line">sp.y = starty;</span><br><span class="line">sp.step = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(sp);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="comment">//判断队列第一个点</span></span><br><span class="line">point tmp = q.<span class="built_in">front</span>();</span><br><span class="line"><span class="keyword">if</span>(tmp.x == endx &amp;&amp; tmp.y == endy)&#123;</span><br><span class="line">cout&lt;&lt;tmp.step;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以该点为发散点遍历周围的点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i)&#123;</span><br><span class="line"><span class="type">int</span> tmpx = tmp.x+dx[i];</span><br><span class="line"><span class="type">int</span> tmpy = tmp.y+dy[i]; </span><br><span class="line"><span class="keyword">if</span>(v[tmpx][tmpy] ==<span class="number">0</span> &amp;&amp; map[tmpx][tmpy] == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//没有访问过 &amp;&amp; 没有障碍</span></span><br><span class="line">point next;next.x = tmpx;next.y = tmpy;</span><br><span class="line">next.step = tmp.step + <span class="number">1</span>;</span><br><span class="line">v[tmpx][tmpy] = <span class="number">1</span>;<span class="comment">//访问过了</span></span><br><span class="line">q.<span class="built_in">push</span>(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) cout&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>教程</title>
      <link href="/2023/10/10/%E6%95%99%E7%A8%8B/"/>
      <url>/2023/10/10/%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>将我认为好教程记录下来:<br><a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/87864677">VSCode配置C&#x2F;C++环境</a></p><p><a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/577803695?utm_id=0">CMake在Windows和VScode配置</a></p><p>cmake是什么？</p><p>langchain 使用 </p><p>qt的下载</p><p>clion + qt 的配置</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷第七期</title>
      <link href="/2023/10/08/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%B8%83%E6%9C%9F/"/>
      <url>/2023/10/08/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%B8%83%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="Einstein学画画（欧拉通路）"><a href="#Einstein学画画（欧拉通路）" class="headerlink" title="Einstein学画画（欧拉通路）"></a>Einstein学画画（欧拉通路）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Einstein 学起了画画。</p><p>此人比较懒~~，他希望用最少的笔画画出一张画……</p><p>给定一个无向图，包含 $n$ 个顶点（编号 $1 \sim n$），$m$ 条边，求最少用多少笔可以画出图中所有的边。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数 $n, m$。</p><p>接下来 $m$ 行，每行两个数 $a, b$（$a \ne b$），表示 $a, b$ 两点之间有一条边相连。</p><p>一条边不会被描述多次。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个数，即问题的答案。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">2 5</span><br><span class="line">3 4</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $50 %$ 的数据，$n \le 50$，$m \le 100$。</p><p>对于 $100%$ 的数据，$1 \le n \le 1000$，$1 \le m \le {10}^5$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// #include&lt;math.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> d[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="type">int</span> v,u;cin&gt;&gt;v&gt;&gt;u;</span><br><span class="line">d[v]++;d[u]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//奇点的个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[i]%<span class="number">2</span>==<span class="number">1</span>)ans++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans = <span class="built_in">max</span>(ans/<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="圆（图形）"><a href="#圆（图形）" class="headerlink" title="圆（图形）"></a>圆（图形）</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出 $n$ 个圆，保证任意两个圆都不相交且不相切。  </p><p>然后给出两个点 $(x_1,y_1),(x_2,y_2)$，保证均不在某个圆上。现在要从 $(x_1,y_1) \to (x_2,y_2)$ 画条曲线，问这条曲线最少穿过多少次圆的边界？</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><ul><li>第一行为一个整数 $n$，表示圆的个数；</li><li>第二行是 $n$ 个整数，表示 $n$ 个圆的 $x$ 坐标；</li><li>第三行是 $n$ 个整数，表示 $n$ 个圆的 $y$ 坐标；</li><li>第四行是 $n$ 个整数，表示 $n$ 个圆的半径 $r$；</li><li>第五行是四个整数 $x_1,y_1,x_2,y_2$。</li></ul><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>仅一个整数，表示最少要穿过多少次圆的边界。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1 -3 2 5 -4 12 12</span><br><span class="line">1 -1 2 5 5 1 1</span><br><span class="line">8 1 2 1 1 1 2</span><br><span class="line">-5 1 12 1</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p>【数据范围】  </p><p>对于 $100%$ 的数据，$1\le n \le 50$，$|x|,|y| \le 1000$，$1 \le r \le 1000$。</p><p>保证圆之间没有公共点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="comment">// #include&lt;algorithm&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有一个点在圆内就会穿过一条边界</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> arrx[<span class="number">51</span>],arry[<span class="number">51</span>],arrr[<span class="number">51</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">distance</span><span class="params">(<span class="type">double</span> x1,<span class="type">double</span> y1,<span class="type">double</span> x,<span class="type">double</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x1-x,<span class="number">2</span>)+<span class="built_in">pow</span>(y1-y,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;arrx[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;arry[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;arrr[i];</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> x1,y1,x2,y2,ans=<span class="number">0</span>;cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="comment">//一个在外面，一个在里面</span></span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">distance</span>(x1,y1,arrx[i],arry[i])&lt;arrr[i])^(<span class="built_in">distance</span>(x2,y2,arrx[i],arry[i])&lt;arrr[i]))ans++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="选书（dp，搜索）"><a href="#选书（dp，搜索）" class="headerlink" title="选书（dp，搜索）"></a>选书（dp，搜索）</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>学校放寒假时，信息学奥赛辅导老师有 $1,2,3,\cdots,x$ 本书，要分给参加培训的 $x$ 个人，每人只能选一本书，但是每人有两本喜欢的书。</p><p>老师事先让每个人将自己喜欢的书填写在一张表上。然后根据他们填写的表来分配书本，希望设计一个程序帮助老师求出所有可能的分配方案，使每个学生都满意。</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>第 $1$ 行一个数 $x$。</p><p>第 $2$ 行至第 $1+x$ 行，每行两个数，表示 $a_i$ 喜欢的书的序号。</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>只有一个数，总方案数 $\mathit{total}$。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">1 3</span><br><span class="line">4 5</span><br><span class="line">2 5</span><br><span class="line">1 4</span><br><span class="line">3 5</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><h3 id="数据范围及约定"><a href="#数据范围及约定" class="headerlink" title="数据范围及约定"></a>数据范围及约定</h3><p>对于全部数据，$1\le x\le 20$。</p><p>$\text{update 2022&#x2F;03&#x2F;07}$，阮行止</p><p>本题原始数据中，最后一个数据点的 x 为 $0$，期望输出为  $0$。考虑到这个数据不合理，予以删去。现在提交这个题目不会遇到 $x&#x3D;0$ 的数据点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="comment">// #include&lt;algorithm&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> book[<span class="number">50</span>],res,x;</span><br><span class="line"><span class="type">bool</span> flag[<span class="number">50</span>],like[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="comment">//like[i][j]表示第i个人喜欢第j本书</span></span><br><span class="line"><span class="comment">//flag表示该书是否被选择</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">so</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=x;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag[j]&amp;&amp;like[i][j])&#123;</span><br><span class="line"><span class="comment">//书没被选，且为第i个人喜欢该第j本书</span></span><br><span class="line">flag[j]=<span class="number">0</span>;<span class="comment">//书被选了</span></span><br><span class="line"><span class="comment">// book[i]=j;</span></span><br><span class="line"><span class="keyword">if</span>(i==x) res++;<span class="comment">//最后一个人选书了，一种</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">so</span>(i<span class="number">+1</span>);<span class="comment">//下一个人选书</span></span><br><span class="line">flag[j]=<span class="number">1</span>;<span class="comment">//第j本书没选</span></span><br><span class="line"><span class="comment">// book[i]=0;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;x;<span class="comment">//几本书</span></span><br><span class="line"><span class="type">int</span> t1,t2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x;++i)&#123;</span><br><span class="line">cin&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">like[i][t1]=<span class="literal">true</span>;</span><br><span class="line">like[i][t2]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将喜欢列表存起来</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x;++i)&#123;</span><br><span class="line">flag[i]=<span class="literal">true</span>;<span class="comment">//true表示书没选</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">so</span>(<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="无穷的序列（二分搜索）"><a href="#无穷的序列（二分搜索）" class="headerlink" title="无穷的序列（二分搜索）"></a>无穷的序列（二分搜索）</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一个无穷序列如下：</p><p>$\texttt{110100100010000100000}$…</p><p>请你找出这个无穷序列中指定位置上的数字。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个正整数 $N$ ，表示询问次数；</p><p>接下来的 $N$ 行每行一个正整数 $A_i$，$A_i$ 表示在序列中的位置。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出为 $N$ 行，每行为 $0$ 或 $1$ ，表示序列第  $A_i$ 位上的数字。</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3</span><br><span class="line">14</span><br><span class="line">7</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><p>对于 $100%$ 的数据，$N \leq 1,500,000$，$A_i≤10^9$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2e5+5</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;++i)&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(v[i<span class="number">-1</span>]+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp);</span><br><span class="line"><span class="keyword">auto</span> it = <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()<span class="number">+1</span>,tmp);</span><br><span class="line"><span class="keyword">if</span>(*it == tmp)<span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="通天之分组背包（分组背包）"><a href="#通天之分组背包（分组背包）" class="headerlink" title="通天之分组背包（分组背包）"></a>通天之分组背包（分组背包）</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>直达通天路·小 A 历险记第二篇</p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>自 $01$ 背包问世之后，小 A 对此深感兴趣。一天，小 A 去远游，却发现他的背包不同于 $01$ 背包，他的物品大致可分为 $k$ 组，每组中的物品相互冲突，现在，他想知道最大的利用价值是多少。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>两个数 $m,n$，表示一共有 $n$ 件物品，总重量为 $m$。</p><p>接下来 $n$ 行，每行 $3$ 个数 $a_i,b_i,c_i$，表示物品的重量，利用价值，所属组数。</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个数，最大的利用价值。</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">45 3</span><br><span class="line">10 10 1</span><br><span class="line">10 5 1</span><br><span class="line">50 400 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h2 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h2><p>$1 \leq m, n \leq 1000$，$1\leq k\leq 100$，$a_i, b_i, c_i$ 在 <code>int</code> 范围内。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 2e5+5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//dp求01背包问题</span></span><br><span class="line"><span class="type">int</span> dp[<span class="number">1001</span>];</span><br><span class="line"><span class="comment">//di[i][j]表示前i个物品放入的j容量的背包的最大价值</span></span><br><span class="line"><span class="type">int</span> w[<span class="number">10001</span>];<span class="comment">//每种物品的重量</span></span><br><span class="line"><span class="type">int</span> v[<span class="number">10001</span>];<span class="comment">//每个种物品的价值</span></span><br><span class="line"><span class="type">int</span> g[<span class="number">205</span>][<span class="number">205</span>];<span class="comment">//</span></span><br><span class="line"><span class="type">int</span> b[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m,n,x=<span class="number">0</span>,t=<span class="number">0</span>;cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="comment">//m容量，n物品，x为当前组数,t为总共组数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">cin&gt;&gt;w[i]&gt;&gt;v[i]&gt;&gt;x;</span><br><span class="line">t = <span class="built_in">max</span>(t,x);</span><br><span class="line">b[x]++;<span class="comment">//第x组的个数；</span></span><br><span class="line">g[x][b[x]] = i;<span class="comment">//g[i][j]表示第i组中第j个物品的编号（与w[i]、v[i]对应）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= t;++i)&#123;<span class="comment">//控制组数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = m;j&gt;=<span class="number">0</span>;--j)&#123;<span class="comment">//控制容量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k&lt;=b[i];++k)&#123;<span class="comment">//遍历每个小组的</span></span><br><span class="line"><span class="keyword">if</span>(j&gt;=w[g[i][k]])&#123;<span class="comment">//当前容量存得下</span></span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-w[g[i][k]]]+v[g[i][k]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;dp[m];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于01背包问题:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//dp求01背包问题</span></span><br><span class="line"><span class="type">int</span> dp[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="comment">//di[i][j]表示前i个物品放入的j容量的背包的最大价值</span></span><br><span class="line"><span class="type">int</span> w[<span class="number">10</span>];<span class="comment">//每种物品的重量</span></span><br><span class="line"><span class="type">int</span> v[<span class="number">10</span>];<span class="comment">//每个种物品的价值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m,n;cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="comment">//m物品，n容量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(w[i]&gt;j)&#123;</span><br><span class="line"><span class="comment">//该将放入物品重量是否大于当前背包容量</span></span><br><span class="line"><span class="comment">//放入物品大于目前容量</span></span><br><span class="line"><span class="comment">//不放入，取不放该物体时，最大价值,即上一层</span></span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//放入物品小于目前容量</span></span><br><span class="line"><span class="comment">//选择放和不放</span></span><br><span class="line"><span class="comment">//放该物品:就是将该物品先放进去，还剩余多少容量，放入前面所有物品的最大价值。</span></span><br><span class="line"><span class="comment">//不放该物品:就是当前容量下，没放该物品的最大价值</span></span><br><span class="line">dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j-w[i]]+v[i],dp[i<span class="number">-1</span>][j])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>压缩成一维数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//dp求01背包问题</span></span><br><span class="line"><span class="type">int</span> dp[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//di[i][j]表示前i个物品放入的j容量的背包的最大价值</span></span><br><span class="line"><span class="type">int</span> w[<span class="number">10</span>];<span class="comment">//每种物品的重量</span></span><br><span class="line"><span class="type">int</span> v[<span class="number">10</span>];<span class="comment">//每个种物品的价值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m,n;cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="comment">//m物品，n容量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=n;j&gt;=w[i];--j)&#123;</span><br><span class="line"><span class="comment">//压缩成一维数组</span></span><br><span class="line"><span class="comment">//都是继承前一层的，回溯原来数据即可。</span></span><br><span class="line"><span class="comment">//j&gt;=w[i]，保证放入背包的物品一定小于背包剩余容量</span></span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j-w[i]]+v[i],dp[j])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷第六期</title>
      <link href="/2023/09/30/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E5%85%AD%E6%9C%9F/"/>
      <url>/2023/09/30/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E5%85%AD%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="合并序列（vector）"><a href="#合并序列（vector）" class="headerlink" title="合并序列（vector）"></a>合并序列（vector）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $N$ 个单词和字符串 $T$，按字典序输出以字符串 $T$ 为前缀的所有单词。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入文件第一行包含一个正整数 $N$；</p><p>接下来 $N$ 行，每行一个单词，长度不超过 $100$；</p><p>最后一行包含字符串 $T$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>按字典序升序输出答案。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">na</span><br><span class="line">no</span><br><span class="line">ki</span><br><span class="line">ki</span><br><span class="line">ka</span><br><span class="line">ku</span><br><span class="line">k</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ka</span><br><span class="line">ki</span><br><span class="line">ki</span><br><span class="line">ku</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【数据规模】</p><p>对于 $60%$ 的数据，满足 $1 \le N \le 1000$；</p><p>对于 $100%$ 的数据，满足 $1 \le N \le 100000$ 且所有字符均为小写字母。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">vector&lt;string&gt; v,ans;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">string tmp; cin &gt;&gt; tmp;</span><br><span class="line">v.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string pre; cin &gt;&gt; pre;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; i : v) &#123;</span><br><span class="line"><span class="keyword">if</span> (i.<span class="built_in">find</span>(pre) == <span class="number">0</span>) &#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; i : ans)</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="AHOI2005-约数研究"><a href="#AHOI2005-约数研究" class="headerlink" title="[AHOI2005] 约数研究"></a>[AHOI2005] 约数研究</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>科学家们在 Samuel 星球上的探险得到了丰富的能源储备，这使得空间站中大型计算机 Samuel II 的长时间运算成为了可能。由于在去年一年的辛苦工作取得了不错的成绩，小联被允许用 Samuel II 进行数学研究。</p><p>小联最近在研究和约数有关的问题，他统计每个正数 $N$ 的约数的个数，并以 $f(N)$ 来表示。例如 $12$ 的约数有 $1,2,3,4,6,12$，因此 $f(12)&#x3D;6$。下表给出了一些 $f(N)$ 的取值：</p><table><thead><tr><th>$N$</th><th>$1$</th><th>$2$</th><th>$3$</th><th>$4$</th><th>$5$</th><th>$6$</th></tr></thead><tbody><tr><td>$f(N)$</td><td>$1$</td><td>$2$</td><td>$2$</td><td>$3$</td><td>$2$</td><td>$4$</td></tr></tbody></table><p>现在请你求出：</p><p>$$<br>\sum_{i&#x3D;1}^n f(i)<br>$$</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入一个整数 $n$。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出答案。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><ul><li>对于 $20%$ 的数据，$N \leq 5000$；</li><li>对于 $100%$ 的数据，$1 \leq N \leq 10^6$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n,sum=<span class="number">0</span>; cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">sum += n / i;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; sum;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="跳马问题（深度搜索dfs）"><a href="#跳马问题（深度搜索dfs）" class="headerlink" title="跳马问题（深度搜索dfs）"></a>跳马问题（深度搜索dfs）</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>在爱与愁的故事第一弹第三章出来前先练练四道基本的回溯&#x2F;搜索题吧……</p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>中国象棋半张棋盘如图 $1$ 所示。马自左下角 $(0,0)$ 向右上角 $(m,n)$ 跳。规定只能往右跳，不准往左跳。比如图 $1$ 中所示为一种跳行路线，并将路径总数打印出来。</p><p><img src="https://cdn.luogu.com.cn/upload/pic/450.png"></p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>只有一行：两个数 $n$，$m$。</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>只有一个数：总方案数 $total$。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 8</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">37</span><br></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><p>对于 $100%$ 的数据：$n, m\leq 18$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//感觉可以dp也可也dfs，先用dfs写</span></span><br><span class="line"><span class="type">int</span> m, n,ans=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//打表</span></span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">-2</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a == m &amp;&amp; b == n) &#123; ans++; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="type">int</span> x = a + dx[i];</span><br><span class="line"><span class="type">int</span> y = b + dy[i];</span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= m &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y &lt;= n)</span><br><span class="line"><span class="built_in">dfs</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="最大子树和（树形-dfs-dp，贪心）"><a href="#最大子树和（树形-dfs-dp，贪心）" class="headerlink" title="最大子树和（树形,dfs,dp，贪心）"></a>最大子树和（树形,dfs,dp，贪心）</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>小明对数学饱有兴趣，并且是个勤奋好学的学生，总是在课后留在教室向老师请教一些问题。一天他早晨骑车去上课，路上见到一个老伯正在修剪花花草草，顿时想到了一个有关修剪花卉的问题。于是当日课后，小明就向老师提出了这个问题：</p><p>一株奇怪的花卉，上面共连有 $N$ 朵花，共有 $N-1$ 条枝干将花儿连在一起，并且未修剪时每朵花都不是孤立的。每朵花都有一个“美丽指数”，该数越大说明这朵花越漂亮，也有“美丽指数”为负数的，说明这朵花看着都让人恶心。所谓“修剪”，意为：去掉其中的一条枝条，这样一株花就成了两株，扔掉其中一株。经过一系列“修剪“之后，还剩下最后一株花（也可能是一朵）。老师的任务就是：通过一系列“修剪”（也可以什么“修剪”都不进行），使剩下的那株（那朵）花卉上所有花朵的“美丽指数”之和最大。</p><p>老师想了一会儿，给出了正解。小明见问题被轻易攻破，相当不爽，于是又拿来问你。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $n\ (1\le N\le 16000)$。表示原始的那株花卉上共 $n$ 朵花。</p><p>第二行有 $n$ 个整数，第 $i$ 个整数表示第 $i$ 朵花的美丽指数。</p><p>接下来 $n-1$ 行每行两个整数 $a,b$，表示存在一条连接第 $a$ 朵花和第 $b$ 朵花的枝条。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个数，表示一系列“修剪”之后所能得到的“美丽指数”之和的最大值。保证绝对值不超过 $2147483647$。</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">-1 -1 -1 1 1 1 0</span><br><span class="line">1 4</span><br><span class="line">2 5</span><br><span class="line">3 6</span><br><span class="line">4 7</span><br><span class="line">5 7</span><br><span class="line">6 7</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><h3 id="数据范围及约定"><a href="#数据范围及约定" class="headerlink" title="数据范围及约定"></a>数据范围及约定</h3><ul><li>对于 $60%$ 的数据，有 $1\le N\le 1000$；</li><li>对于 $100%$ 的数据，有 $1\le N\le 16000$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//树形,dfs,dp，贪心</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[N];<span class="comment">//dp[i]第i花为根节点，的最大美丽指数和</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> fa)</span> </span>&#123;</span><br><span class="line"><span class="comment">//x代表该节点，fa代表x的父节点</span></span><br><span class="line">dp[x] = w[x];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; i : g[x]) &#123;</span><br><span class="line"><span class="comment">//x的每个子节点</span></span><br><span class="line"><span class="keyword">if</span> (i != fa) &#123;<span class="comment">//不能扫到父节点（树不需要vis[]）</span></span><br><span class="line"><span class="built_in">dfs</span>(i,x);</span><br><span class="line"><span class="keyword">if</span> (dp[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">dp[x] += dp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">cin &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">//装树</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="type">int</span> a, b; cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">g[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">g[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">-2147483647</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="精卫填海（优化01背包）"><a href="#精卫填海（优化01背包）" class="headerlink" title="精卫填海（优化01背包）"></a>精卫填海（优化01背包）</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>本题为改编题。</p><blockquote><p>发鸠之山，其上多柘木。有鸟焉，其状如乌，文首，白喙，赤足，名曰精卫，其名自詨。是炎帝之少女，名曰女娃。女娃游于东海，溺而不返，故为精卫。常衔西山之木石，以堙于东海。——《山海经》</p></blockquote><p>精卫终于快把东海填平了！只剩下了最后的一小片区域了。同时，西山上的木石也已经不多了。精卫能把东海填平吗？</p><p>事实上，东海未填平的区域还需要至少体积为 $v$ 的木石才可以填平，而西山上的木石还剩下 $n$ 块，每块的体积和把它衔到东海需要的体力分别为 $k$ 和 $m$。精卫已经填海填了这么长时间了，她也很累了，她还剩下的体力为 $c$。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入文件的第一行是三个整数：$v,n,c$。</p><p>从第二行到第 $n+1$ 行分别为每块木石的体积和把它衔到东海需要的体力。</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出文件只有一行，如果精卫能把东海填平，则输出她把东海填平后剩下的最大的体力，否则输出 <code>Impossible</code>（不带引号）。</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">100 2 10</span><br><span class="line">50 5</span><br><span class="line">50 5</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 2 1</span><br><span class="line">50 5</span><br><span class="line">10 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Impossible</span><br></pre></td></tr></table></figure><h2 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h2><h3 id="数据范围及约定-1"><a href="#数据范围及约定-1" class="headerlink" title="数据范围及约定"></a>数据范围及约定</h3><ul><li>对于 $20%$ 的数据，$0&lt;n \le 50$；</li><li>对于 $50%$ 的数据，$0&lt;n \le 1000$；</li><li>对于 $100%$ 的数据，$0&lt;n \le 10^4$，所有读入的数均属于 $[0,10^4]$，最后答案不大于 $c$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x7ffffff</span>;</span><br><span class="line"><span class="type">int</span> k[N], m[N], dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> v, n, c;</span><br><span class="line">    cin &gt;&gt; v &gt;&gt; n &gt;&gt; c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        cin &gt;&gt; k[i] &gt;&gt; m[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= v; i++)</span><br><span class="line">        dp[i] = INF;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = v; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= k[i]) </span><br><span class="line">                dp[j] = <span class="built_in">min</span>(dp[j], dp[j-k[i]] + m[i]);</span><br><span class="line">            <span class="keyword">else</span> dp[j] = <span class="built_in">min</span>(dp[j], m[i]);<span class="comment">//状态转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(c &lt; dp[v])cout &lt;&lt; <span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; c - dp[v];<span class="comment">//开心地输出剩余体力</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷第五期</title>
      <link href="/2023/09/28/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%BA%94%E6%9C%9F/"/>
      <url>/2023/09/28/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%BA%94%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="小A点菜-dp动态规划"><a href="#小A点菜-dp动态规划" class="headerlink" title="小A点菜(dp动态规划)"></a>小A点菜(dp动态规划)</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>uim 神犇拿到了 uoi 的 ra（镭牌）后，立刻拉着基友小 A 到了一家……餐馆，很低端的那种。</p><p>uim 指着墙上的价目表（太低级了没有菜单），说：“随便点”。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>不过 uim 由于买了一些书，口袋里只剩 $M$ 元 $(M \le 10000)$。</p><p>餐馆虽低端，但是菜品种类不少，有 $N$ 种 $(N \le 100)$，第 $i$ 种卖 $a_i$ 元 $(a_i \le 1000)$。由于是很低端的餐馆，所以每种菜只有一份。</p><p>小 A 奉行“不把钱吃光不罢休”，所以他点单一定刚好把 uim 身上所有钱花完。他想知道有多少种点菜方法。</p><p>由于小 A 肚子太饿，所以最多只能等待 $1$ 秒。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行是两个数字，表示 $N$ 和 $M$。</p><p>第二行起 $N$ 个正数 $a_i$（可以有相同的数字，每个数字均在 $1000$ 以内）。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个正整数，表示点菜方案数，保证答案的范围在 int 之内。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 1 2 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>2020.8.29，增添一组 hack 数据 by @yummy</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态规划dp</span></span><br><span class="line"><span class="type">int</span> dp[<span class="number">1000</span>][<span class="number">10001</span>];<span class="comment">//表示第前i种菜所花总钱数j的方案数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == j)dp[i][j] = dp[i<span class="number">-1</span>][j] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; j)dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; j)dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i<span class="number">-1</span>][j - a[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[n][m];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="台阶问题（dp动态规划）"><a href="#台阶问题（dp动态规划）" class="headerlink" title="台阶问题（dp动态规划）"></a>台阶问题（dp动态规划）</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $N$ 级台阶，你一开始在底部，每次可以向上迈 $1\sim K$ 级台阶，问到达第 $N$ 级台阶有多少种不同方式。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>两个正整数 $N,K$。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个正整数 $ans\pmod{100003}$，为到达第 $N$ 级台阶的不同方式数。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><ul><li>对于 $20%$ 的数据，$1\leq N\leq10$，$1\leq K\leq3$；</li><li>对于 $40%$ 的数据，$1\leq N\leq1000$；</li><li>对于 $100%$ 的数据，$1\leq N\leq100000$，$1\leq K\leq100$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line">ll dp[N];<span class="comment">//dp[i]代表第i级的方案数</span></span><br><span class="line"><span class="comment">//级数没有夸得步数大</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, k; cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">min</span>(k,i); ++j) &#123;</span><br><span class="line">dp[i] = (dp[i] + dp[i - j])%<span class="number">100003</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[n] % <span class="number">100003</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="兔八哥与猎人（最大公约数）"><a href="#兔八哥与猎人（最大公约数）" class="headerlink" title="兔八哥与猎人（最大公约数）"></a>兔八哥与猎人（最大公约数）</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>兔八哥躲藏在树林旁边的果园里。果园有 $M  \times  N$ 棵树，组成一个 $M$ 行 $N$ 列的矩阵，水平或垂直相邻的两棵树的距离为 $1$。兔八哥在一棵果树下。</p><p>猎人背着猎枪走进了果园，他爬上一棵果树，准备杀死兔八哥。</p><p>如果猎人与兔八哥之间没有其它的果树，猎人就可以看到兔八哥。</p><p>现己知猎人和兔八哥的位置，编写程序判断兔子所在的位置是否安全.</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行为 $n$，表示有 $n$ 组数据，每组数据的第一行为两个正整数 $a_x$ 和 $a_y$，表示猎人的位置，第二行为两个正整数 $b_x$ 和 $b_y$，表示兔八哥的位置。</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>共有 $n$ 行，每行为 <code>yes</code> 或 <code>no</code> 表示兔八哥的位置是否安全。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no</span><br></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><p>$1\le n \le 10^5$，$1 \le  a_x, a_y, b_x, b_y \le  10^8$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">ll ax, ay, bx, by;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">cin &gt;&gt; ax &gt;&gt; ay &gt;&gt; bx &gt;&gt; by;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">gcd</span>(<span class="built_in">abs</span>(ax - bx), <span class="built_in">abs</span>(ay - by))!=<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//有最大公约数，不互质，两点之间有棵树，整点</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数列分段-Section-I（贪心）"><a href="#数列分段-Section-I（贪心）" class="headerlink" title="数列分段 Section I（贪心）"></a>数列分段 Section I（贪心）</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>对于给定的一个长度为 $N$ 的正整数数列 $A_i$，现要将其分成<strong>连续</strong>的若干段，并且每段和不超过 $M$（可以等于$M$），问最少能将其分成多少段使得满足要求。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>第1行包含两个正整数 $N,M$，表示了数列 $A_i$ 的长度与每段和的最大值，第 $2$ 行包含 $N$ 个空格隔开的非负整数 $A_i$，如题目所述。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个正整数，输出最少划分的段数。</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 6</span><br><span class="line">4 2 4 5 1</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><p>对于$20%$的数据，有$N≤10$；</p><p>对于$40%$的数据，有$N≤1000$；</p><p>对于$100%$的数据，有$N≤100000,M≤10^9$，$M$大于所有数的最大值，$A_i$之和不超过$10^9$。</p><p>将数列如下划分：</p><p>$[4][2 4][5 1]$</p><p>第一段和为$4$，第$2$段和为$6$，第$3$段和为$6$均满足和不超过$M&#x3D;6$，并可以证明$3$是最少划分的段数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一眼贪心，就是要段中数加入的多，但不超过m，</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ll n,m,sum=<span class="number">0</span>,count=<span class="number">0</span>; cin &gt;&gt; n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line">sum += tmp;</span><br><span class="line"><span class="keyword">if</span> (sum &gt; m) &#123;</span><br><span class="line">count++;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">sum += tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; count<span class="number">+1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="医院设置（dp动态规划-dfs，树）"><a href="#医院设置（dp动态规划-dfs，树）" class="headerlink" title="医院设置（dp动态规划,dfs，树）"></a>医院设置（dp动态规划,dfs，树）</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>设有一棵二叉树，如图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/kawht13x.png"></p><p>其中，圈中的数字表示结点中居民的人口。圈边上数字表示结点编号，现在要求在某个结点上建立一个医院，使所有居民所走的路程之和为最小，同时约定，相邻接点之间的距离为 $1$。如上图中，若医院建在 $1$ 处，则距离和 $&#x3D;4+12+2\times20+2\times40&#x3D;136$；若医院建在 $3$ 处，则距离和 $&#x3D;4\times2+13+20+40&#x3D;81$。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $n$，表示树的结点数。</p><p>接下来的 $n$ 行每行描述了一个结点的状况，包含三个整数 $w, u, v$，其中 $w$ 为居民人口数，$u$ 为左链接（为 $0$ 表示无链接），$v$ 为右链接（为 $0$ 表示无链接）。</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示最小距离和。</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">13 2 3</span><br><span class="line">4 0 0</span><br><span class="line">12 4 5</span><br><span class="line">20 0 0</span><br><span class="line">40 0 0</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">81</span><br></pre></td></tr></table></figure><h2 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h2><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于 $100%$ 的数据，保证 $1 \leq n \leq 100$，$0 \leq u, v \leq n$，$1 \leq w \leq 10^5$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> ll inf = <span class="number">2e18</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态规划，dp，</span></span><br><span class="line"><span class="comment">//二叉树</span></span><br><span class="line"><span class="comment">//循环将每个结点作为根节点，dfs计算根结点为起点到每个结点路径长度。</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> w[N];<span class="comment">//第i结点的权值</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; g[N];<span class="comment">//v[i]，与第i结点相邻的所有结点。</span></span><br><span class="line"><span class="comment">//用该数据结构将所有树存储起来。</span></span><br><span class="line"></span><br><span class="line">bitset&lt;N&gt; vis;</span><br><span class="line"><span class="type">int</span> deep[N];</span><br><span class="line"><span class="comment">//返回第i结点的最小距离和</span></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">vis[i] = <span class="literal">true</span>;</span><br><span class="line">ll res = deep[i] * w[i];</span><br><span class="line"><span class="comment">//每个结点的递归</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp; y:g[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (vis[y]) <span class="keyword">continue</span>;</span><br><span class="line">deep[y] = deep[i] + <span class="number">1</span>;<span class="comment">//下个相连结点高度增加一</span></span><br><span class="line">res += <span class="built_in">dfs</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="type">int</span> u, v; cin &gt;&gt; w[i] &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="keyword">if</span> (u) &#123; g[i].<span class="built_in">push_back</span>(u); g[u].<span class="built_in">push_back</span>(i); &#125;<span class="comment">//两个结点互相都要</span></span><br><span class="line"><span class="keyword">if</span> (v) &#123; g[i].<span class="built_in">push_back</span>(v); g[v].<span class="built_in">push_back</span>(i); &#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans = inf;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">vis.<span class="built_in">reset</span>();</span><br><span class="line">deep[i] = <span class="number">0</span>;<span class="comment">//起始点为0</span></span><br><span class="line">ans = <span class="built_in">min</span>(ans, <span class="built_in">dfs</span>(i));</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷第四期</title>
      <link href="/2023/09/23/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E5%9B%9B%E6%9C%9F/"/>
      <url>/2023/09/23/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E5%9B%9B%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="连续自然数和-双指针、前缀和"><a href="#连续自然数和-双指针、前缀和" class="headerlink" title="连续自然数和(双指针、前缀和)"></a>连续自然数和(双指针、前缀和)</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>对一个给定的正整数 $M$，求出所有的连续的正整数段（每一段至少有两个数），这些连续的自然数段中的全部数之和为 $M$。</p><p>例子：$1998+1999+2000+2001+2002 &#x3D; 10000$，所以从 $1998$ 到 $2002$ 的一个自然数段为 $M&#x3D;10000$ 的一个解。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>包含一个整数的单独一行给出 $M$ 的值（$10 \le M \le 2,000,000$）。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>每行两个正整数，给出一个满足条件的连续正整数段中的第一个数和最后一个数，两数之间用一个空格隔开，所有输出行的第一个按从小到大的升序排列，对于给定的输入数据，保证至少有一个解。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10000</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">18 142 </span><br><span class="line">297 328 </span><br><span class="line">388 412 </span><br><span class="line">1998 2002</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> m; cin &gt;&gt; m;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; m; j++) &#123;</span><br><span class="line">sum += j;</span><br><span class="line"><span class="keyword">if</span> (sum == m) &#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; m) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从i到j的区间之和，如果和大于sum，则舍弃掉该轮循环，<br>i向后移动，重新开始。如果存在相等的，则为一个结果。</p><h1 id="NOIP2008-提高组-笨小猴-hash-map"><a href="#NOIP2008-提高组-笨小猴-hash-map" class="headerlink" title="[NOIP2008 提高组] 笨小猴(hash,map)"></a>[NOIP2008 提高组] 笨小猴(hash,map)</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>笨小猴的词汇量很小，所以每次做英语选择题的时候都很头疼。但是他找到了一种方法，经试验证明，用这种方法去选择选项的时候选对的几率非常大！</p><p>这种方法的具体描述如下：假设 $\text{maxn}$ 是单词中出现次数最多的字母的出现次数，$\text{minn}$ 是单词中出现次数最少的字母的出现次数，如果 $\text{maxn}-\text{minn}$ 是一个质数，那么笨小猴就认为这是个 Lucky Word，这样的单词很可能就是正确的答案。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个单词，其中只可能出现小写字母，并且长度小于 $100$。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>共两行，第一行是一个字符串，假设输入的的单词是 Lucky Word，那么输出 <code>Lucky Word</code>，否则输出 <code>No Answer</code>；</p><p>第二行是一个整数，如果输入单词是 <code>Lucky Word</code>，输出 $\text{maxn}-\text{minn}$ 的值，否则输出 $0$。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Lucky Word</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">olympic</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No Answer</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>【输入输出样例 1 解释】</p><p>单词 <code>error</code> 中出现最多的字母 $\texttt r$ 出现了 $3$ 次，出现次数最少的字母出现了 $1$ 次，$3-1&#x3D;2$，$2$ 是质数。</p><p>【输入输出样例 2 解释】</p><p>单词 <code>olympic</code> 中出现最多的字母 $\texttt i$ 出现了 $1$ 次，出现次数最少的字母出现了 $1$ 次，$1-1&#x3D;0$，$0$ 不是质数。</p><p>（本处原题面错误已经修正）</p><p>noip2008 提高第一题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isZS</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i*i &lt; x; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (x % i == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s; cin &gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">mp[s[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> maxn=<span class="number">0</span>, minn=<span class="number">100000000</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : mp) &#123;</span><br><span class="line"><span class="keyword">if</span> (i.second &gt;= maxn)maxn = i.second;</span><br><span class="line"><span class="keyword">if</span> (i.second &lt;= minn)minn = i.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isZS</span>(maxn - minn))</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lucky Word&quot;</span> &lt;&lt; endl &lt;&lt; maxn - minn &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No Answer&quot;</span> &lt;&lt; endl &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>minn起始值要设置大。</p><p>关于素数的判断： </p><ol><li>小于2的(0,1,负数)是没有素数的，直接返回false</li><li>从2开始循环到n-1的数，如果有能整除掉该数的那必定非素数，返回false</li><li>找完了没发现就返回true。</li><li>素数定义（只能被自身和1整除）</li></ol><h1 id="迷宫-dfs"><a href="#迷宫-dfs" class="headerlink" title="迷宫(dfs)"></a>迷宫(dfs)</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个 $N \times M$ 方格的迷宫，迷宫里有 $T$ 处障碍，障碍处不可通过。</p><p>在迷宫中移动有上下左右四种方式，每次只能移动一个方格。数据保证起点上没有障碍。</p><p>给定起点坐标和终点坐标，每个方格最多经过一次，问有多少种从起点坐标到终点坐标的方案。</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行为三个正整数 $N,M,T$，分别表示迷宫的长宽和障碍总数。</p><p>第二行为四个正整数 $SX,SY,FX,FY$，$SX,SY$ 代表起点坐标，$FX,FY$ 代表终点坐标。</p><p>接下来 $T$ 行，每行两个正整数，表示障碍点的坐标。</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出从起点坐标到终点坐标的方案总数。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 2 1</span><br><span class="line">1 1 2 2</span><br><span class="line">1 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p>对于 $100%$ 的数据，$1 \le N,M \le 5$，$1 \le T \le 10$，$1 \le SX,FX \le n$，$1 \le SY,FY \le m$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要多联系dfs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//dfs深度搜索</span></span><br><span class="line"><span class="type">int</span> map[<span class="number">6</span>][<span class="number">6</span>];<span class="comment">//能否走</span></span><br><span class="line"><span class="comment">//打表格,左右上下移动</span></span><br><span class="line"><span class="type">int</span> bx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> by[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标记是否走过</span></span><br><span class="line"><span class="type">bool</span> tmp[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> sx, sy, fx, fy;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="comment">//x,y代表“起点”</span></span><br><span class="line"><span class="keyword">if</span> (x == fx &amp;&amp; y == fy) &#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;<span class="comment">//移动到终点了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//四个方向的移动</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="comment">//边界（重点）</span></span><br><span class="line"><span class="keyword">if</span> (map[x + bx[i]][y + by[i]] == <span class="number">1</span> &amp;&amp; !tmp[x + bx[i]][y + by[i]] &amp;&amp; x + bx[i]) &#123;</span><br><span class="line"><span class="comment">//下个点能走(没障碍，没走过)</span></span><br><span class="line">tmp[x][y] = <span class="literal">true</span>;<span class="comment">//（x,y）走过了，打标记</span></span><br><span class="line"><span class="built_in">dfs</span>(x + bx[i], y + by[i]);</span><br><span class="line">tmp[x][y] = <span class="literal">false</span>;<span class="comment">//找完了该线路，恢复没走过，否则影响其他</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, t; cin &gt;&gt; n &gt;&gt; m &gt;&gt; t;</span><br><span class="line"> cin &gt;&gt; sx &gt;&gt; sy&gt;&gt;fx&gt;&gt;fy;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> ix = <span class="number">1</span>; ix &lt;= n; ix++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> iy = <span class="number">1</span>; iy &lt;= m; iy++)</span><br><span class="line">map[ix][iy] = <span class="number">1</span>;<span class="comment">//把地图刷成1；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">map[x][y] = <span class="number">0</span>;<span class="comment">//不能走</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(sx, sy);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="NOIP2004-提高组-合并果子-USACO06NOV-Fence-Repair-G-优先队列-multiset"><a href="#NOIP2004-提高组-合并果子-USACO06NOV-Fence-Repair-G-优先队列-multiset" class="headerlink" title="[NOIP2004 提高组] 合并果子 &#x2F; [USACO06NOV] Fence Repair G(优先队列,multiset)"></a>[NOIP2004 提高组] 合并果子 &#x2F; [USACO06NOV] Fence Repair G(优先队列,multiset)</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。</p><p>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 $n-1$ 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 $1$ ，并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。</p><p>例如有 $3$ 种果子，数目依次为 $1$ ， $2$ ， $9$ 。可以先将 $1$ 、 $2$ 堆合并，新堆数目为 $3$ ，耗费体力为 $3$ 。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 $12$ ，耗费体力为 $12$ 。所以多多总共耗费体力 $&#x3D;3+12&#x3D;15$ 。可以证明 $15$ 为最小的体力耗费值。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>共两行。<br>第一行是一个整数 $n(1\leq n\leq 10000)$ ，表示果子的种类数。  </p><p>第二行包含 $n$ 个整数，用空格分隔，第 $i$ 个整数 $a_i(1\leq a_i\leq 20000)$ 是第 $i$ 种果子的数目。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 $2^{31}$ 。</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 </span><br><span class="line">1 2 9</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15</span><br></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><p>对于 $30%$ 的数据，保证有 $n \le 1000$：</p><p>对于 $50%$ 的数据，保证有 $n \le 5000$；</p><p>对于全部的数据，保证有 $n \le 10000$。</p><p>multiset解法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//贪心感觉是，每次取最小数目的两个，共合并n-1次</span></span><br><span class="line"><span class="comment">//不断排序有序的数据结构</span></span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; ms;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n,tmp=<span class="number">0</span>; cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; tmp; ms.<span class="built_in">insert</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> it = ms.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (ms.<span class="built_in">size</span>()&gt;<span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">int</span> a = *ms.<span class="built_in">begin</span>(); ms.<span class="built_in">erase</span>(ms.<span class="built_in">begin</span>());</span><br><span class="line"><span class="type">int</span> b = *ms.<span class="built_in">begin</span>(); ms.<span class="built_in">erase</span>(ms.<span class="built_in">begin</span>());</span><br><span class="line">ms.<span class="built_in">insert</span>(a + b);</span><br><span class="line">res += (a + b);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>priority_queue优先队列解法</p><blockquote><p>std::priority_queue 是 C++ 标准库中的容器适配器，它提供了一种优先级队列的数据结构。优先级队列是一种特殊类型的队列，其中每个元素都有一个相关的优先级值，具有最高优先级的元素始终位于队列的前部。<br>std::priority_queue 的特点如下：<br>元素按照优先级进行排序，具有较高优先级的元素排在前面。<br>默认情况下，std::priority_queue 使用 std::less 比较器进行降序排序，即最大的元素位于队列的前部。也可以通过自定义比较器来改变排序方式。<br>插入和删除元素的时间复杂度为对数级别，保证了较高的性能。<br>不支持随机访问，只能操作队列的头部元素。<br>使用 std::priority_queue 需要包含 <queue> 头文件。</p></blockquote><p>以下是 std::priority_queue 常用的成员函数和操作：</p><p>push(const T&amp; value)：将元素 value 插入优先级队列中。<br>pop()：移除队列头部的元素。<br>top()：返回队列头部的元素，即具有最高优先级的元素。<br>empty()：检查</p><h1 id="NOIP2002-普及组-产生数-dfs"><a href="#NOIP2002-普及组-产生数-dfs" class="headerlink" title="[NOIP2002 普及组] 产生数(dfs)"></a>[NOIP2002 普及组] 产生数(dfs)</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个整数 $n$ 和 $k$ 个变换规则。</p><p>规则：</p><ul><li>一位数可变换成另一个一位数。</li><li>规则的右部不能为零。</li></ul><p>例如：$n&#x3D;234,k&#x3D;2$。有以下两个规则：</p><ul><li>$2\longrightarrow 5$。  </li><li>$3\longrightarrow 6$。</li></ul><p>上面的整数 $234$ 经过变换后可能产生出的整数为（包括原数）:</p><ul><li>$234$。</li><li>$534$。</li><li>$264$。</li><li>$564$。</li></ul><p>共 $4$ 种不同的产生数。</p><p>现在给出一个整数 $n$ 和 $k$ 个规则。求出经过任意次的变换（$0$ 次或多次），能产生出多少个不同整数。</p><p>仅要求输出个数。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数 $n,k$，含义如题面所示。</p><p>接下来 $k$ 行，每行两个整数 $x_i,y_i$，表示每条规则。</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>共一行，输出能生成的数字个数。</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">234 2</span><br><span class="line">2 5</span><br><span class="line">3 6</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><p>对于 $100%$ 数据，满足 $n \lt 10^{30}$，$k \le 15$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第三题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">output</span><span class="params">(__int128 x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x / <span class="number">10</span>)<span class="built_in">output</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dfs,找出每数字到各各数字的线路总数，代表该数字可以变化的种类数。</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> vis[<span class="number">30</span>];<span class="comment">//表示该点是否走过</span></span><br><span class="line"><span class="comment">//储存每个规则</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">&#125;rule[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">string n; <span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res[<span class="number">30</span>];<span class="comment">//每个结点到其他点的数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (rule[i].x == n &amp;&amp; vis[rule[i].y] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//规则的起点是n，目标点没走过</span></span><br><span class="line">ans++;</span><br><span class="line">vis[rule[i].y] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(rule[i].y);<span class="comment">//下一点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">cin &gt;&gt; rule[i].x &gt;&gt; rule[i].y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">ans = <span class="number">0</span>;<span class="comment">//重置</span></span><br><span class="line"><span class="type">int</span> now = n[i] - <span class="string">&#x27;0&#x27;</span>;<span class="comment">//当前起点</span></span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in">sizeof</span>(vis));<span class="comment">//都设置未走过</span></span><br><span class="line">vis[now] = <span class="number">1</span>;<span class="comment">//起点走过</span></span><br><span class="line"><span class="built_in">dfs</span>(now);<span class="comment">//起点</span></span><br><span class="line">res[i] = ans + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int128 jieguo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n.<span class="built_in">length</span>(); ++i)</span><br><span class="line">jieguo *= res[i];</span><br><span class="line"><span class="built_in">output</span>(jieguo);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于  <code>memset(vis, 0, sizeof(vis));//都设置未走过</code><br>需要头文件<code>&lt;cstring&gt;</code><br>其作用：将一段内存块设置为指定的值<br>此处将vis数组全部设置为0  </p><p>此题需要考虑<strong>高精度</strong>，满足 $n \lt 10^{30}$<br>n是可能超过long long的，故设置为<code>__int128</code>大小的数。</p><p>关于dfs<br>dfs 就是从一个出发到达其余所有点的遍历方法</p><ol><li>需要循环条件其余</li><li>判断下个点是否合法</li><li>进入下个点（注意设置已访问和恢复状态）</li></ol><blockquote><p>总结：<code>#include &lt;string&gt;</code>引入了 C++ 标准库中的字符串类 std::string，而 <code>#include &lt;cstring&gt; </code>引入了 C 语言标准库中的字符串处理函数的声明。它们在功能和使用方式上有所不同，std::string 提供了更加高级和方便的字符串操作，而 cstring 则适用于 C 风格的字符串处理。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷第三期</title>
      <link href="/2023/09/20/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%B8%89%E6%9C%9F/"/>
      <url>/2023/09/20/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%B8%89%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="NOIP2007-普及组-纪念品分组（贪心）"><a href="#NOIP2007-普及组-纪念品分组（贪心）" class="headerlink" title="[NOIP2007 普及组] 纪念品分组（贪心）"></a>[NOIP2007 普及组] 纪念品分组（贪心）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>元旦快到了，校学生会让乐乐负责新年晚会的纪念品发放工作。为使得参加晚会的同学所获得 的纪念品价值相对均衡，他要把购来的纪念品根据价格进行分组，但每组最多只能包括两件纪念品， 并且每组纪念品的价格之和不能超过一个给定的整数。为了保证在尽量短的时间内发完所有纪念品，乐乐希望分组的数目最少。</p><p>你的任务是写一个程序，找出所有分组方案中分组数最少的一种，输出最少的分组数目。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>共 $n+2$ 行：</p><p>第一行包括一个整数 $w$，为每组纪念品价格之和的上限。</p><p>第二行为一个整数 $n$，表示购来的纪念品的总件数 $G$。</p><p>第 $3\sim n+2$ 行每行包含一个正整数 $P_i$ 表示所对应纪念品的价格。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，即最少的分组数目。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">100 </span><br><span class="line">9 </span><br><span class="line">90 </span><br><span class="line">20 </span><br><span class="line">20 </span><br><span class="line">30 </span><br><span class="line">50 </span><br><span class="line">60 </span><br><span class="line">70 </span><br><span class="line">80 </span><br><span class="line">90</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>$50%$ 的数据满足：$1\le n\le15$。</p><p>$100%$ 的数据满足：$1\le n\le3\times10^4$，$80\le w\le200$，$5 \le  P_i  \le  w$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="comment">//先将数组排序，最大和最小匹配，不超过w,两个指针都移动，超过，将最大值单独作为一个组，</span></span><br><span class="line"><span class="type">int</span> arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> w, n; cin &gt;&gt; w &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)cin &gt;&gt; arr[i];</span><br><span class="line"><span class="built_in">sort</span>(arr + <span class="number">1</span>, arr + <span class="number">1</span> + n);</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= n) &#123;</span><br><span class="line"><span class="keyword">if</span> (l != n &amp;&amp; arr[l] + arr[n] &lt;= w) l++;</span><br><span class="line">n--; ans++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="A-B-数对（哈希）"><a href="#A-B-数对（哈希）" class="headerlink" title="A-B 数对（哈希）"></a>A-B 数对（哈希）</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>出题是一件痛苦的事情！</p><p>相同的题目看多了也会有审美疲劳，于是我舍弃了大家所熟悉的 A+B Problem，改用 A-B 了哈哈！</p><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一串正整数数列以及一个正整数 $C$，要求计算出所有满足 $A - B &#x3D; C$ 的数对的个数（不同位置的数字一样的数对算不同的数对）。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入共两行。</p><p>第一行，两个正整数 $N,C$。</p><p>第二行，$N$ 个正整数，作为要求处理的那串数。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，表示该串正整数中包含的满足 $A - B &#x3D; C$ 的数对的个数。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 1</span><br><span class="line">1 1 2 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p>对于 $75%$ 的数据，$1 \leq N \leq 2000$。</p><p>对于 $100%$ 的数据，$1 \leq N \leq 2 \times 10^5$，$0 \leq a_i &lt;2^{30}$，$1 \leq C &lt; 2^{30}$。</p><p>2017&#x2F;4&#x2F;29 新添数据两组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line">map&lt;ll,ll&gt; mp;</span><br><span class="line">ll arr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ll n, c,ans=<span class="number">0</span>; cin &gt;&gt; n &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line">mp[arr[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans += mp[arr[i] - c];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="平台（搜索）"><a href="#平台（搜索）" class="headerlink" title="平台（搜索）"></a>平台（搜索）</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>空间中有一些平台。给出每个平台的位置，请你计算从每一个平台的边缘落下之后会落到哪一个平台上。注意，如果某两个平台的某个两边缘横坐标相同，物体从上面那个平台落下之后将不会落在下面那个平台上。平台<strong>可能会重叠</strong>。</p><p><strong>如果有两个平台的高度相同且都可以被落到的话，那么会落到编号靠前的那个平台。</strong></p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有一个数 $N$ 表示平台的个数;</p><p>接下来 $N$ 行每行三个整数 分别是平台的高度 $H_i$，左端点的 $X$ 坐标 $L_i$，右端点的 $X$ 坐标 $R_i$。</p><p>其中，$1 \le N \le {10}^3$，$0 \le H,L,R \le 2 \times {10}^4$。</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共 $N$ 行，每行两个数，分别表示：</p><p>从第 $i$ 个平台的左边缘落下后到达的平台序号和右边缘落下以后到达的平台序号。</p><p>输入数据中第一个平台的序号是 $1$。如果某个平台的某个边缘下面没有平台了，输出 $0$。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2 0 2</span><br><span class="line">4 1 3</span><br><span class="line">3 1 3</span><br><span class="line">5 3 4</span><br><span class="line">1 1 5</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 5</span><br><span class="line">1 5</span><br><span class="line">1 5</span><br><span class="line">5 5</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/lh1i0yzf.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> h;</span><br><span class="line"><span class="type">int</span> l;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Node&amp; u)<span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> h == u.h ? id &gt; u.id:h &lt; u.h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; ans[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n ; cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="type">int</span> h, l, r; cin &gt;&gt; h &gt;&gt; l &gt;&gt; r;</span><br><span class="line">p[i] = &#123; h,l,r,i &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(p + <span class="number">1</span>, p + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (p[j].l&lt;p[i].l &amp;&amp; p[j].r&gt;p[i].l &amp;&amp; p[j].h &lt; p[i].h) &#123;</span><br><span class="line">x = p[j].id;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; --j) &#123;</span><br><span class="line"><span class="keyword">if</span> (p[j].l&lt;p[i].r &amp;&amp; p[j].r&gt;p[i].r &amp;&amp; p[j].h &lt; p[i].h) &#123;</span><br><span class="line">y = p[j].id;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans[p[i].id] = &#123; x,y &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">cout &lt;&lt; ans[i].first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; ans[i].second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="修复公路（并查集）"><a href="#修复公路（并查集）" class="headerlink" title="修复公路（并查集）"></a>修复公路（并查集）</h1><h2 id="题目背景-1"><a href="#题目背景-1" class="headerlink" title="题目背景"></a>题目背景</h2><p>A 地区在地震过后，连接所有村庄的公路都造成了损坏而无法通车。政府派人修复这些公路。</p><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出 A 地区的村庄数 $N$，和公路数 $M$，公路是双向的。并告诉你每条公路的连着哪两个村庄，并告诉你什么时候能修完这条公路。问最早什么时候任意两个村庄能够通车，即最早什么时候任意两条村庄都存在至少一条修复完成的道路（可以由多条公路连成一条道路）。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>第 $1$ 行两个正整数 $N,M$。</p><p>下面 $M$ 行，每行 $3$ 个正整数 $x,y,t$，告诉你这条公路连着 $x,y$ 两个村庄，在时间t时能修复完成这条公路。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>如果全部公路修复完毕仍然存在两个村庄无法通车，则输出 $-1$，否则输出最早什么时候任意两个村庄能够通车。</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 2 6</span><br><span class="line">1 3 4</span><br><span class="line">1 4 5</span><br><span class="line">4 2 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><p>$1\leq x, y\leq N \le 10 ^ 3$，$1\leq M, t \le 10 ^ 5$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//并查集，先将不断将村庄合并，如果其中出现所有村庄的祖结点为一个，则就退出</span></span><br><span class="line"><span class="comment">//表示所有村庄都联通了。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//天数短的先修完</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y, t;</span><br><span class="line">&#125;arr[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="comment">//fa[i] = 1,表示结点i的祖结点为1</span></span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照修时间排序</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.t &lt; b.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findgf</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (fa[a] == a) <span class="keyword">return</span> a;<span class="comment">//祖结点是其本身</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//不是其本身，就不断往上寻找。</span></span><br><span class="line">fa[a] = <span class="built_in">findgf</span>(fa[a]);<span class="comment">//压缩路径</span></span><br><span class="line"><span class="keyword">return</span> fa[a];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">findgf</span>(a);<span class="comment">//找到x的祖结点</span></span><br><span class="line"><span class="type">int</span> y = <span class="built_in">findgf</span>(b);<span class="comment">//y的祖结点</span></span><br><span class="line">fa[x] = y;<span class="comment">//x的祖结点为y</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//检查集合中是否存在都有一个祖节点</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (fa[i] == i) sum++;</span><br><span class="line"><span class="keyword">if</span> (sum == <span class="number">2</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有一个祖结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="comment">//初始化每个结点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)fa[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="type">int</span> a, b, c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">arr[i] = &#123; a,b,c &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(arr + <span class="number">1</span>, arr + m + <span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="comment">//不断合并两个结点（就是祖结点相同）</span></span><br><span class="line"><span class="built_in">merge</span>(arr[i].x, arr[i].y);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>()) &#123;</span><br><span class="line">cout &lt;&lt; arr[i].t;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>P1551 亲戚</p><h1 id="最大子段和-贪心、双指针"><a href="#最大子段和-贪心、双指针" class="headerlink" title="最大子段和(贪心、双指针)"></a>最大子段和(贪心、双指针)</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个长度为 $n$ 的序列 $a$，选出其中连续且非空的一段使得这段和最大。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行是一个整数，表示序列的长度 $n$。</p><p>第二行有 $n$ 个整数，第 $i$ 个整数表示序列的第 $i$ 个数字 $a_i$。</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数表示答案。</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">2 -4 3 -1 2 -4 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h2><h4 id="样例-1-解释"><a href="#样例-1-解释" class="headerlink" title="样例 1 解释"></a>样例 1 解释</h4><p>选取 $[3, 5]$ 子段 ${3, -1, 2}$，其和为 $4$。</p><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><ul><li>对于 $40%$ 的数据，保证 $n \leq 2 \times 10^3$。</li><li>对于 $100%$ 的数据，保证 $1 \leq n \leq 2 \times 10^5$，$-10^4 \leq a_i \leq 10^4$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line">ll a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)cin &gt;&gt; a[i];</span><br><span class="line">ll ans = a[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">sum += a[i];</span><br><span class="line">ans = <span class="built_in">max</span>(ans, sum);<span class="comment">//新加的数，与不加的比较，取大的。</span></span><br><span class="line"><span class="keyword">if</span> (sum &lt; <span class="number">0</span>)sum = <span class="number">0</span>;<span class="comment">//如果加了最后小于0了，直接舍弃掉，因为这段子序列就是负面的。</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷第一期</title>
      <link href="/2023/09/19/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
      <url>/2023/09/19/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%B8%80%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="NOIP2002-普及组-过河卒（动态规划）"><a href="#NOIP2002-普及组-过河卒（动态规划）" class="headerlink" title="[NOIP2002 普及组] 过河卒（动态规划）"></a>[NOIP2002 普及组] 过河卒（动态规划）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>棋盘上 $A$ 点有一个过河卒，需要走到目标 $B$ 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 $C$ 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p><p>棋盘用坐标表示，$A$ 点 $(0, 0)$、$B$ 点 $(n, m)$，同样马的位置坐标是需要给出的。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/f3wwgqj6.png"></p><p>现在要求你计算出卒从 $A$ 点能够到达 $B$ 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行四个正整数，分别表示 $B$ 点坐标和马的坐标。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示所有的路径条数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 6 3 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100 %$ 的数据，$1 \le n, m \le 20$，$0 \le$ 马的坐标 $\le 20$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第四题</p><p>题解：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> mp[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//马走点</span></span><br><span class="line"><span class="type">int</span> xf[<span class="number">8</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-2</span> &#125;;</span><br><span class="line"><span class="type">int</span> yf[<span class="number">8</span>] = &#123; <span class="number">2</span>,<span class="number">1</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-2</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//m,n B点</span></span><br><span class="line"><span class="comment">//x,y马点</span></span><br><span class="line"><span class="type">int</span> n, m, x, y;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;</span><br><span class="line">n++; m++; x++; y++;</span><br><span class="line"><span class="comment">//标出能走的点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> xp = x + xf[i];</span><br><span class="line"><span class="type">int</span> yp = y + yf[i];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt;= xp &amp;&amp; xp &lt;= n &amp;&amp; <span class="number">1</span> &lt;= yp &amp;&amp; yp &lt;= m)</span><br><span class="line">mp[xp][yp] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//马自身</span></span><br><span class="line">mp[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//起点只有一条线</span></span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (mp[i][j]) dp[i][j] = <span class="number">0</span>;<span class="comment">//马控制点，则为0线路</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; dp[n][m];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于动态规划：  </p><ol><li>状态定义：</li><li>状态转移方程：</li><li>边界条件：</li><li>计算顺序：</li></ol><p>打表：<br>打出马走的位置，即障碍点。</p><p>如该题:<br>最重要就是得到状态转移方程，即<br>$<br>dp[i][j] &#x3D; dp[i-1][j] + dp[i][j-1]<br>$<br>d[i][j]表示从该点的线路数<br>一个点的线路数等于从它上面一个点走下来的线路数加上从它左边走下来的线路数<br>但是注意：除了第一个点 d[1][1] &#x3D; 1  </p><p>先去掉所有不能使用的点  </p><p>该题需要注意，马自己的点也是控制点</p><h1 id="NOIP2011-提高组-铺地毯（枚举）"><a href="#NOIP2011-提高组-铺地毯（枚举）" class="headerlink" title="[NOIP2011 提高组] 铺地毯（枚举）"></a>[NOIP2011 提高组] 铺地毯（枚举）</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 $n$ 张地毯，编号从 $1$ 到 $n$。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。</p><p>地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入共 $n + 2$ 行。</p><p>第一行，一个整数 $n$，表示总共有 $n$ 张地毯。</p><p>接下来的 $n$ 行中，第 $i+1$ 行表示编号 $i$ 的地毯的信息，包含四个整数 $a ,b ,g ,k$，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标 $(a, b)$ 以及地毯在 $x$ 轴和 $y$ 轴方向的长度。</p><p>第 $n + 2$ 行包含两个整数 $x$ 和 $y$，表示所求的地面的点的坐标 $(x, y)$。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共 $1$ 行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出 <code>-1</code>。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 0 2 3</span><br><span class="line">0 2 3 3</span><br><span class="line">2 1 3 3</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 0 2 3</span><br><span class="line">0 2 3 3</span><br><span class="line">2 1 3 3</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p>【样例解释 1】</p><p>如下图，$1$ 号地毯用实线表示，$2$ 号地毯用虚线表示，$3$ 号用双实线表示，覆盖点 $(2,2)$ 的最上面一张地毯是 $3$ 号地毯。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/gcm3ne0q.png"></p><p>【数据范围】</p><p>对于 $30%$ 的数据，有 $n \le 2$。<br>对于 $50%$ 的数据，$0 \le a, b, g, k \le 100$。<br>对于 $100%$ 的数据，有 $0 \le n \le 10^4$, $0 \le a, b, g, k \le {10}^5$。   </p><p>noip2011 提高组 day1 第 $1$ 题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左下角和右上角的坐标</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">&#125;d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> a, b, g, k;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; g &gt;&gt; k;</span><br><span class="line">d[i].x1 = a;</span><br><span class="line">d[i].y1 = b;</span><br><span class="line">d[i].x2 = a + g - <span class="number">1</span>;</span><br><span class="line">d[i].y2 = b + k - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从后面开始读</span></span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= d[i].x1 &amp;&amp; y &gt;= d[i].y1 &amp;&amp; x &lt;= d[i].x2 &amp;&amp; y &lt;= d[i].y2) &#123;</span><br><span class="line">ans = i<span class="number">+1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将数据先用结构体存储起（存储顺便将长度转化为坐标，方便后面对于一个点是否在被覆盖的判断）<br>最后是<strong>从后往前遍历</strong>，如果当前点被覆盖，则直接输出当前覆盖的地毯编号，否则继续遍历。</p><h1 id="NOIP1998-普及组-三连击-set使用"><a href="#NOIP1998-普及组-三连击-set使用" class="headerlink" title="[NOIP1998 普及组] 三连击(set使用)"></a>[NOIP1998 普及组] 三连击(set使用)</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>本题为提交答案题，您可以写程序或手算在本机上算出答案后，直接提交答案文本，也可提交答案生成程序。</p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>将 $1, 2, \ldots , 9$ 共 $9$ 个数分成 $3$ 组，分别组成 $3$ 个三位数，且使这 $3$ 个三位数构成 $1 : 2 : 3$ 的比例，试求出所有满足条件的 $3$ 个三位数。</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>无</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>若干行，每行 $3$ 个数字。按照每行第 $1$ 个数字升序排列。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">192 384 576</span><br><span class="line">* * *</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line">（剩余部分不予展示）</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isUnique</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j,<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="comment">//将每个数的每一位添加如set集合中</span></span><br><span class="line"><span class="keyword">while</span> (i) &#123; s.<span class="built_in">insert</span>(i % <span class="number">10</span>); i /= <span class="number">10</span>; &#125;</span><br><span class="line"><span class="keyword">while</span> (j) &#123; s.<span class="built_in">insert</span>(j % <span class="number">10</span>); j /= <span class="number">10</span>; &#125;</span><br><span class="line"><span class="keyword">while</span> (k) &#123; s.<span class="built_in">insert</span>(k % <span class="number">10</span>); k /= <span class="number">10</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : s) <span class="keyword">if</span> (i == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">size</span>() == <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">123</span>; i &lt;= <span class="number">350</span>; ++i) &#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">2</span> * i, k = <span class="number">3</span> * i;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isUnique</span>(i, j, k))</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; j &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; k &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>巧妙使用set集合，set集合所有元素都是唯一的，所以我们可以将每个数的每一位都添加如set集合中。</p><h1 id="NOIP2001-普及组-数的计算-动态规划"><a href="#NOIP2001-普及组-数的计算-动态规划" class="headerlink" title="[NOIP2001 普及组] 数的计算(动态规划)"></a>[NOIP2001 普及组] 数的计算(动态规划)</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出正整数 $n$，要求按如下方式构造数列：</p><ol><li>只有一个数字 $n$ 的数列是一个合法的数列。</li><li>在一个合法的数列的末尾加入一个正整数，但是这个正整数不能超过该数列最后一项的一半，可以得到一个新的合法数列。</li></ol><p>请你求出，一共有多少个合法的数列。两个合法数列 $a, b$ 不同当且仅当两数列长度不同或存在一个正整数 $i \leq |a|$，使得 $a_i \neq b_i$。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入只有一行一个整数，表示 $n$。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数，表示合法的数列个数。</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><h3 id="样例-1-解释"><a href="#样例-1-解释" class="headerlink" title="样例 1 解释"></a>样例 1 解释</h3><p>满足条件的数列为：</p><ul><li>$6$</li><li>$6, 1$</li><li>$6, 2$</li><li>$6, 3$</li><li>$6, 2, 1$</li><li>$6, 3, 1$</li></ul><h3 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h3><p>对于全部的测试点，保证 $1 \leq n \leq 10^3$。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>本题数据来源是 NOIP 2001 普及组第一题，但是原题的题面描述和数据不符，故对题面进行了修改，使之符合数据。原题面如下，谨供参考：</p><blockquote><p>我们要求找出具有下列性质数的个数（包含输入的正整数 $n$）。</p><p>先输入一个正整数 $n$（$n \le 1000$），然后对此正整数按照如下方法进行处理：</p><ol><li>不作任何处理；</li><li>在它的左边拼接一个正整数，但该正整数不能超过原数，或者是上一个被拼接的数的一半；</li><li>加上数后，继续按此规则进行处理，直到不能再加正整数为止。</li></ol></blockquote><p>感谢 @<a href="/user/120868">dbxxx</a> 对本题情况的反馈，原题面的问题见<a target="_blank" rel="noopener" href="https://www.luogu.com.cn/discuss/526184">本贴</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> d[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i / <span class="number">2</span>; j++) &#123;</span><br><span class="line">d[i] += d[j];</span><br><span class="line">&#125;</span><br><span class="line">d[i]++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; d[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该题最重要是理解题意，并将公式推出来。</p><p><img src="https://pic.imgdb.cn/item/650854f6204c2e34d3aa3dc1.jpg"></p><h1 id="NOIP2001-普及组-最大公约数和最小公倍数问题"><a href="#NOIP2001-普及组-最大公约数和最小公倍数问题" class="headerlink" title="[NOIP2001 普及组] 最大公约数和最小公倍数问题"></a>[NOIP2001 普及组] 最大公约数和最小公倍数问题</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个正整数 $x_0, y_0$，求出满足下列条件的 $P, Q$ 的个数：</p><ol><li><p>$P,Q$ 是正整数。</p></li><li><p>要求 $P, Q$ 以 $x_0$ 为最大公约数，以 $y_0$ 为最小公倍数。</p></li></ol><p>试求：满足条件的所有可能的 $P, Q$ 的个数。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行两个正整数 $x_0, y_0$。</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个数，表示求出满足条件的 $P, Q$ 的个数。</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 60</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><p>$P,Q$ 有 $4$ 种：</p><ol><li>$3, 60$。</li><li>$15, 12$。</li><li>$12, 15$。</li><li>$60, 3$。</li></ol><p>对于 $100%$ 的数据，$2 \le x_0, y_0 \le {10}^5$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2001 普及组第二题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">//最大公约数</span></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最小共倍数</span></span><br><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b / <span class="built_in">gcd</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x, y,ans=<span class="number">0</span>; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> p = x; p &lt;= y; ++p) &#123;</span><br><span class="line"><span class="type">int</span> q = x * y / p;</span><br><span class="line"><span class="keyword">if</span> (x * y != p * q)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">gcd</span>(p, q) == x &amp;&amp; <span class="built_in">lcm</span>(p, q) == y) ans++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点:<br>a * b &#x3D; gcd(a,b) * lcm(a,b)</p><p>最大公约数和最小公倍数的求解函数</p>]]></content>
      
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷第二期</title>
      <link href="/2023/09/19/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%BA%8C%E6%9C%9F/"/>
      <url>/2023/09/19/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%BA%8C%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="NOIP2002-提高组-均分纸牌-模拟"><a href="#NOIP2002-提高组-均分纸牌-模拟" class="headerlink" title="[NOIP2002 提高组] 均分纸牌(模拟)"></a>[NOIP2002 提高组] 均分纸牌(模拟)</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $N$ 堆纸牌，编号分别为 $1,2,\ldots,N$。每堆上有若干张，但纸牌总数必为 $N$ 的倍数。可以在任一堆上取若干张纸牌，然后移动。</p><p>移牌规则为：在编号为 $1$ 堆上取的纸牌，只能移到编号为 $2$ 的堆上；在编号为 $N$ 的堆上取的纸牌，只能移到编号为 $N-1$ 的堆上；其他堆上取的纸牌，可以移到相邻左边或右边的堆上。</p><p>现在要求找出一种移动方法，用最少的移动次数使每堆上纸牌数都一样多。</p><p>例如 $N&#x3D;4$ 时，$4$ 堆纸牌数分别为 $9,8,17,6$。</p><p>移动 $3$ 次可达到目的：</p><ul><li>从第三堆取 $4$ 张牌放到第四堆，此时每堆纸牌数分别为 $9,8,13,10$。</li><li>从第三堆取 $3$ 张牌放到第二堆，此时每堆纸牌数分别为 $9,11,10,10$。</li><li>从第二堆取 $1$ 张牌放到第一堆，此时每堆纸牌数分别为  $10,10,10,10$。</li></ul><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行共一个整数 $N$，表示纸牌堆数。<br>第二行共 $N$ 个整数 $A_1,A_2,\ldots,A_N$，表示每堆纸牌初始时的纸牌数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>共一行，即所有堆均达到相等时的最少移动次数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">9 8 17 6</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100%$ 的数据，$1  \le  N  \le  100$，$1 \le  A_i  \le 10000$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2002 提高组第一题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n,sum=<span class="number">0</span>,avg,ans=<span class="number">0</span>; cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; arr[i];</span><br><span class="line">sum += arr[i];</span><br><span class="line">&#125;</span><br><span class="line">avg = sum / n;</span><br><span class="line">    <span class="comment">//从左到右遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; avg) &#123;</span><br><span class="line">            <span class="comment">//该位置的少，从右边取</span></span><br><span class="line"><span class="type">int</span> k = avg - arr[i];</span><br><span class="line">arr[i + <span class="number">1</span>] -= k; arr[i] += k;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; avg) &#123;</span><br><span class="line">            <span class="comment">//该位置的多，放右边</span></span><br><span class="line"><span class="type">int</span> k = arr[i] - avg;</span><br><span class="line">arr[i] -= k; arr[i + <span class="number">1</span>] += k;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NOIP2002-普及组-选数-DFS深度遍历"><a href="#NOIP2002-普及组-选数-DFS深度遍历" class="headerlink" title="[NOIP2002 普及组] 选数(DFS深度遍历)"></a>[NOIP2002 普及组] 选数(DFS深度遍历)</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知 $n$ 个整数 $x_1,x_2,\cdots,x_n$，以及 $1$ 个整数 $k$（$k&lt;n$）。从 $n$ 个整数中任选 $k$ 个整数相加，可分别得到一系列的和。例如当 $n&#x3D;4$，$k&#x3D;3$，$4$ 个整数分别为 $3,7,12,19$ 时，可得全部的组合与它们的和为：</p><p>$3+7+12&#x3D;22$</p><p>$3+7+19&#x3D;29$</p><p>$7+12+19&#x3D;38$</p><p>$3+12+19&#x3D;34$</p><p>现在，要求你计算出和为素数共有多少种。</p><p>例如上例，只有一种的和为素数：$3+7+19&#x3D;29$。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个空格隔开的整数 $n,k$（$1 \le n \le 20$，$k&lt;n$）。</p><p>第二行 $n$ 个整数，分别为 $x_1,x_2,\cdots,x_n$（$1 \le x_i \le 5\times 10^6$）。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数，表示种类数。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">3 7 12 19</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第二题</p><p><img src="https://pic.imgdb.cn/item/650ae4b0c458853aef742c6b.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k,ans,arr[<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrim</span><span class="params">(<span class="type">int</span> sum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt; sum; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (sum % i == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//m为选多少个数，sum表示选的这几个数的和，start表示从哪出开始</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> sum, <span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k == m) &#123;</span><br><span class="line"><span class="comment">//选的数字为k个了，进行和的素数判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isPrim</span>(sum)) &#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原来start后面的一个</span></span><br><span class="line"><span class="comment">//start又指向新的位置arr[0]+arr[1] or arr[0]+arr[2],</span></span><br><span class="line"><span class="comment">//start又指向新的位置arr[0]+arr[1]+arr[2] or arr[0]+arr[2],m==3时候</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; n; i++)</span><br><span class="line"><span class="built_in">dfs</span>(m + <span class="number">1</span>, sum + arr[i], i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)cin &gt;&gt; arr[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要使用dfs进行整数全排列<br><strong>start</strong>后面一个开始<br>在dfs中的模板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(退出条件)&#123;&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(对其他结果进行遍历)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不写<code>else</code>,则需要在退出条件加上<code>return</code>;</p><h1 id="NOIP2006-普及组-开心的金明-01背包问题"><a href="#NOIP2006-普及组-开心的金明-01背包问题" class="headerlink" title="[NOIP2006 普及组] 开心的金明(01背包问题)"></a>[NOIP2006 普及组] 开心的金明(01背包问题)</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过 $N$ 元钱就行”。今天一早金明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的 $N$ 元。于是，他把每件物品规定了一个重要度，分为 $5$ 等：用整数 $1-5$ 表示，第 $5$ 等最重要。他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过 $N$ 元（可以等于 $N$ 元）的前提下，使每件物品的价格与重要度的乘积的总和最大。</p><p>设第$j$件物品的价格为 $v_j$，重要度为 $w_j$，共选中了 $k$ 件物品，编号依次为 $j_1,j_2,…,j_k$，则所求的总和为：</p><p>$v_{j_1} \times w_{j_1}+v_{j_2} \times w_{j_2} …+v_{j_k} \times w_{j_k}$。</p><p>请你帮助金明设计一个满足要求的购物单。</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行，为 $2$ 个正整数，用一个空格隔开：$n,m$（$n&lt;30000,m&lt;25$）其中 $n$ 表示总钱数，$m$ 为希望购买物品的个数。</p><p>从第 $2$ 行到第 $m+1$ 行，第 $j$ 行给出了编号为 $j-1$ 的物品的基本数据，每行有 $2$ 个非负整数 $v,p$（其中 $v$ 表示该物品的价格 $(v \le 10000)$，$p$ 表示该物品的重要度（$1\le p\le5$）。</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>$1$ 个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（$&lt;100000000$）。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1000 5</span><br><span class="line">800 2</span><br><span class="line">400 5</span><br><span class="line">300 5</span><br><span class="line">400 3</span><br><span class="line">200 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3900</span><br></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><p>NOIP 2006 普及组 第二题</p><p>关于背包问题:<br><a target="_blank" rel="noopener" href="https://www.bilibili.com/video/BV1pY4y1J7na/?spm_id_from=333.337.search-card.all.click&vd_source=cd15ef71fe6f4187af03b74e20f12fab">https://www.bilibili.com/video/BV1pY4y1J7na/?spm_id_from=333.337.search-card.all.click&amp;vd_source=cd15ef71fe6f4187af03b74e20f12fab</a></p><p>背包称重从0到最大，每个品类分别放入不同称重量的背包中，<br>当物品重量超过背包承重量，就不放入背包，取上面一行的最大价值，上面一行的就是代表，只放入上面物品的最大价值。<br>若物品重量小于&#x2F;等于背包承重量，就放入背包，和将剩下的可承重量再放入，该承重量的最大价值，总价值就是剩下承重梁的最大价值加+放入背包该类的价值。<br>将不放该类，和原来的上面一行的最大价值比较。<br>因为加入了该类可能需要舍弃其他物品，水质不如原来了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转化为01背包问题</span></span><br><span class="line"><span class="comment">//n总钱数为背包容量，m物品种类个数</span></span><br><span class="line"><span class="comment">//v[j]价格为重量，v[j] * w[j]为价值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> v[<span class="number">30</span>], w[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[<span class="number">30</span>][<span class="number">30000</span>];<span class="comment">//第i个种类的，不超过钱数n的最大价格乘上权重</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (v[i] &gt; j) dp[i][j] = dp[i - <span class="number">1</span>][j];<span class="comment">//当前品类的重量大了，放不进背包</span></span><br><span class="line"><span class="keyword">else</span> dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - v[i]] + v[i] * w[i]);<span class="comment">//原来背包的价值，和将i物品放入+剩下空间最优的价值，哪个大</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; dp[m][n];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高低位交换-进制的操作"><a href="#高低位交换-进制的操作" class="headerlink" title="高低位交换(进制的操作)"></a>高低位交换(进制的操作)</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个小于 $2^{32}$ 的非负整数。这个数可以用一个 $32$ 位的二进制数表示（不足 $32$ 位用 $0$ 补足）。我们称这个二进制数的前 $16$ 位为“高位”，后 $16$ 位为“低位”。将它的高低位交换，我们可以得到一个新的数。试问这个新的数是多少（用十进制表示）。</p><p>例如，数 $1314520$ 用二进制表示为 $0000,0000,0001,0100,0000,1110,1101,1000$（添加了 $11$ 个前导 $0$ 补足为 $32$ 位），其中前 $16$ 位为高位，即 $0000,0000,0001,0100$；后 $16$ 位为低位，即 $0000,1110,1101,1000$。将它的高低位进行交换，我们得到了一个新的二进制数 $0000,1110,1101,1000,0000,0000,0001,0100$。它即是十进制的 $249036820$。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个小于 $2^{32}$ 的非负整数</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>将新的数输出</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1314520</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">249036820</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左右移动多少位，会自动补0，取或（有1的）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> x; cin &gt;&gt; x;</span><br><span class="line">cout &lt;&lt; ((x &lt;&lt; <span class="number">16</span>) | (x &gt;&gt; <span class="number">16</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NOIP2007-提高组-统计数字（map使用）"><a href="#NOIP2007-提高组-统计数字（map使用）" class="headerlink" title="[NOIP2007 提高组] 统计数字（map使用）"></a>[NOIP2007 提高组] 统计数字（map使用）</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p><strong>注意</strong>：数据可能存在加强。</p><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>某次科研调查时得到了 $n$ 个自然数，每个数均不超过 $1.5 \times 10^9$。已知不相同的数不超过 $10^4$ 个，现在需要统计这些自然数各自出现的次数，并按照自然数从小到大的顺序输出统计结果。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>共 $n+1$ 行。</p><p>第一行是整数 $n$，表示自然数的个数；</p><p>第 $2$ 至 $n+1$ 每行一个自然数。</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>共 $m$ 行（$m$ 为 $n$ 个自然数中不相同数的个数），按照自然数从小到大的顺序输出。  </p><p>每行输出 $2$ 个整数，分别是自然数和该数出现的次数，其间用一个空格隔开。</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">100</span><br><span class="line">2</span><br><span class="line">100</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2 3</span><br><span class="line">4 2</span><br><span class="line">5 1</span><br><span class="line">100 2</span><br></pre></td></tr></table></figure><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><ul><li>$40%$ 的数据满足：$1  \le  n  \le  1000$；</li><li>$80%$ 的数据满足：$1  \le  n  \le  50000$；</li><li>$100%$ 的数据满足：$1  \le  n  \le  200000$，每个数均不超过 $1.5 \times 10^9$。</li></ul><p>NOIP 2007 提高第一题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line">map&lt;ll, ll&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> x; cin &gt;&gt; x;</span><br><span class="line">mp[x]++;<span class="comment">//没有key=x的，则自动添加入，并value加一表示一个，</span></span><br><span class="line"><span class="comment">//又key=x,则Value++,多个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; x : mp) &#123;</span><br><span class="line">cout &lt;&lt; x.first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; x.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>题解</title>
      <link href="/2023/08/12/%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/08/12/%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="NOIP2005-普及组-校门外的树"><a href="#NOIP2005-普及组-校门外的树" class="headerlink" title="[NOIP2005 普及组] 校门外的树"></a>[NOIP2005 普及组] 校门外的树</h1><p><a target="_blank" rel="noopener" href="https://www.luogu.com.cn/problem/P1047">地址</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, m = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; m;</span><br><span class="line"><span class="type">int</span> upper = <span class="number">0</span>, lower = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; lower;</span><br><span class="line">cin &gt;&gt; upper;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">cin &gt;&gt; left;</span><br><span class="line">cin &gt;&gt; right;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= lower &amp;&amp; right &gt;= lower &amp;&amp; right &lt;= upper) &#123;</span><br><span class="line">lower = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (right &gt;= upper &amp;&amp; left &gt;= lower &amp;&amp; left &lt;= upper) &#123;</span><br><span class="line">upper = right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(left &lt;= lower &amp;&amp; right &gt;= upper)</span><br><span class="line">&#123;</span><br><span class="line">upper = right;</span><br><span class="line">lower = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (right &lt;= lower || left &gt;= upper) &#123;</span><br><span class="line"><span class="comment">//区间不在范围内</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; new_v;</span><br><span class="line">new_v.<span class="built_in">push_back</span>(left);</span><br><span class="line">new_v.<span class="built_in">push_back</span>(right);</span><br><span class="line">v.<span class="built_in">push_back</span>(new_v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在中间</span></span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; final_v;</span><br><span class="line">final_v.<span class="built_in">push_back</span>(lower);</span><br><span class="line">final_v.<span class="built_in">push_back</span>(upper);</span><br><span class="line">v.<span class="built_in">push_back</span>(final_v);</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; i : v)</span><br><span class="line">sum += (i[<span class="number">1</span>] - i[<span class="number">0</span>]<span class="number">+1</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; l-sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码，没有考虑到产生的新区域是否和原先的重合</p><p>新的思路：<br><strong>将没砍为0，看了为1，只要在区间的都是要砍的</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, m = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; m;</span><br><span class="line"><span class="type">int</span> upper = <span class="number">0</span>, lower = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10001</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="comment">// 0没有，1砍</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">cin &gt;&gt; lower &gt;&gt; upper;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = lower; j &lt;= upper;j++)</span><br><span class="line">v[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; l-<span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">1</span>)<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="NOIP2006-普及组-明明的随机数"><a href="#NOIP2006-普及组-明明的随机数" class="headerlink" title="[NOIP2006 普及组] 明明的随机数"></a>[NOIP2006 普及组] 明明的随机数</h1><p><a target="_blank" rel="noopener" href="https://www.luogu.com.cn/problem/P1059">地址</a><br>我自己的解法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> rand_num = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; rand_num;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rand_num; i++) &#123;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line">it = <span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), tmp);</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line">v.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">cout &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对添加入vector的进行判断，在里面出现过的，就不填入<br><br>其实应该使用set集合，其 <em>不可相同元素、自动排序</em> 适合该题</p><h1 id="NOIP2012-普及组-质因数分解"><a href="#NOIP2012-普及组-质因数分解" class="headerlink" title="[NOIP2012 普及组] 质因数分解"></a>[NOIP2012 普及组] 质因数分解</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知正整数 $n$ 是两个不同的质数的乘积，试求出两者中较大的那个质数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; n / i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两质数相乘得到的数，一定只能由该两质数相乘得到吗？"><a href="#两质数相乘得到的数，一定只能由该两质数相乘得到吗？" class="headerlink" title="两质数相乘得到的数，一定只能由该两质数相乘得到吗？"></a>两质数相乘得到的数，一定只能由该两质数相乘得到吗？</h2><p><strong>两个质数相乘得到的数，一定只能由这两个质数相乘得到。</strong></p><p>这个性质被称为<strong>唯一分解定理</strong>（Unique Factorization Theorem），也被称为正整数的唯一分解定理或质因数分解定理。它指出任何一个大于 1 的整数都可以被唯一地分解为质数的乘积，而且这个分解是唯一的，不考虑质数因子的顺序。</p><p>例如，如果我们将两个质数 2 和 3 相乘，得到 2 * 3 &#x3D; 6。根据唯一分解定理，6 只能分解为 2 和 3 相乘的结果，也就是说，6 的质因数分解形式为 2 * 3。</p><p>因此，两个质数相乘得到的数，一定只能由这两个质数相乘得到，而且这个分解是唯一的。</p><p>需要寻早元素中的最大值，使用max_element函数，如果得到两个相同的最大值，默认是取最后一个，如果需要第一个出现的，则需要：比较器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompareValues</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="keyword">if</span> (sum &gt; <span class="number">8</span>)</span><br><span class="line">m[i] = sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">auto</span> m_ele = <span class="built_in">max_element</span>(m.<span class="built_in">begin</span>(), m.<span class="built_in">end</span>(), <span class="built_in">CompareValues</span>());</span><br><span class="line">cout&lt;&lt; m_ele-&gt;first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2023&#x2F;8&#x2F;17<br>将数转化为字符串则：<br><code>to_string(num)</code></p><p>字符如<code>&quot;dasda&quot;[1]</code>去出来的为char类型  </p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h1 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//生成数组v中l到r的全排列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">permute</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;v,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;<span class="comment">//如果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span>&amp; num:v)&#123;</span><br><span class="line">cout&lt;&lt;num&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line"><span class="built_in">swap</span>(v[l],v[i]);<span class="comment">//将后面元素提到前面</span></span><br><span class="line"><span class="built_in">permute</span>(v,l<span class="number">+1</span>,r);<span class="comment">//除了i前面的,后面的全排列</span></span><br><span class="line"><span class="built_in">swap</span>(v[l],v[i]);<span class="comment">//回溯，还原数组</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">permute</span>(v,<span class="number">0</span>,v.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e+5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//树的直径</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1 2 3</span></span><br><span class="line"><span class="comment">1 3 4</span></span><br><span class="line"><span class="comment">1 4 5</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="comment">//树的直径就是树上点之间最大距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两遍dfs</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[<span class="number">10001</span>];</span><br><span class="line"><span class="comment">//edge[i][j] 节点i 到 i 子节点 edge[i][j];</span></span><br><span class="line"><span class="comment">//用vector数组存储树</span></span><br><span class="line"><span class="type">int</span> vis[<span class="number">10001</span>];</span><br><span class="line"><span class="type">int</span> dis[<span class="number">10001</span>];<span class="comment">//1--&gt;i点的距离</span></span><br><span class="line"><span class="comment">//st起点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> st)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;edge[st].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line"><span class="type">int</span> to = edge[st][i];<span class="comment">//与st节点相链接的点</span></span><br><span class="line"><span class="keyword">if</span>(!vis[to])&#123;</span><br><span class="line"><span class="comment">//子节点没有访问过</span></span><br><span class="line">vis[to] = <span class="number">1</span>;</span><br><span class="line">dis[to] = dis[st] + <span class="number">1</span>;<span class="comment">//1-&gt;2的距离为1</span></span><br><span class="line"><span class="built_in">dfs</span>(to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;= n - <span class="number">1</span> ;++i)&#123;<span class="comment">//边数</span></span><br><span class="line"><span class="type">int</span> u,v;cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> mid = <span class="number">0</span>,midPos = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i] &gt; mid )&#123;</span><br><span class="line">mid = dis[i];</span><br><span class="line">midPos = i;</span><br><span class="line">&#125;<span class="comment">//到最远距离的节点</span></span><br><span class="line">dis[i] = vis[i] = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//恢复原装</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(midPos);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>,endPos = <span class="number">-1</span>;<span class="comment">//endPos 最后一个端点,ans 树的直径</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">1</span>;i &lt;= n;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i] &gt; ans)&#123;</span><br><span class="line">ans = dis[i];</span><br><span class="line">endPos = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endPos;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一些基础知识</p><h2 id="取消同步"><a href="#取消同步" class="headerlink" title="取消同步"></a>取消同步</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="填充函数"><a href="#填充函数" class="headerlink" title="填充函数"></a>填充函数</h3><h2 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h2><p>只能填充 0 &#x2F; -1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">-1</span>, <span class="built_in">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h2><p>可以填充任意数字<br><code>fill(int *begin,int *end,const int &amp; val)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fill</span>(a, a + <span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间复杂度的计算"><a href="#时间复杂度的计算" class="headerlink" title="时间复杂度的计算"></a>时间复杂度的计算</h2><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h3><h3 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h3><p><code>一个for循环</code></p><h3 id="O-log-2-n"><a href="#O-log-2-n" class="headerlink" title="O($\log_2(n)$)"></a>O($\log_2(n)$)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">i *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="O-n-log-2-n"><a href="#O-n-log-2-n" class="headerlink" title="O($n\log_2(n)$)"></a>O($n\log_2(n)$)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line"><span class="type">int</span> i =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">i *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多重循环-O（n-k）"><a href="#多重循环-O（n-k）" class="headerlink" title="多重循环  O（n^k）"></a>多重循环  O（n^k）</h3><h1 id="的简单使用"><a href="#的简单使用" class="headerlink" title=" 的简单使用"></a><algorithm> 的简单使用</h1><h2 id="find-的使用"><a href="#find-的使用" class="headerlink" title="find 的使用"></a>find 的使用</h2><p>返回得是迭代器，是一块地址(指向元素)<br>第一次出现该元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">11</span> &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">find</span>(a, a + <span class="number">10</span>, <span class="number">8</span>) &lt;&lt; endl;<span class="comment">//打印类似0x地址 </span></span><br><span class="line">cout &lt;&lt; *<span class="built_in">find</span>(a, a + <span class="number">10</span>, <span class="number">8</span>) &lt;&lt; endl;<span class="comment">//元素 </span></span><br><span class="line">cout &lt;&lt; <span class="built_in">find</span>(a, a + <span class="number">10</span>, <span class="number">8</span>) - a &lt;&lt; endl;<span class="comment">//打印数组【】内的序号(下标index) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">// 使用 std::find 在 vector 中查找特定元素</span></span><br><span class="line">    <span class="type">int</span> target = <span class="number">3</span>;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt;::iterator it = std::<span class="built_in">find</span>(numbers.<span class="built_in">begin</span>(), numbers.<span class="built_in">end</span>(), target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it != numbers.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Found &quot;</span> &lt;&lt; target &lt;&lt; <span class="string">&quot; at index &quot;</span> &lt;&lt; std::<span class="built_in">distance</span>(numbers.<span class="built_in">begin</span>(), it) &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; target &lt;&lt; <span class="string">&quot; not found in the vector.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是一个使用Markdown语法的表格，展示不同C++数据类型的大小（以字节为单位），假设默认编译环境为32位：</p><table><thead><tr><th>数据类型</th><th>大小 (字节)</th></tr></thead><tbody><tr><td>char</td><td>1</td></tr><tr><td>short</td><td>2</td></tr><tr><td>int</td><td>4</td></tr><tr><td>long</td><td>4</td></tr><tr><td>long long</td><td>8</td></tr><tr><td>float</td><td>4</td></tr><tr><td>double</td><td>8</td></tr><tr><td>long double</td><td>12</td></tr><tr><td>bool</td><td>1</td></tr></tbody></table><table><thead><tr><th>类型</th><th>范围</th><th>估计值</th></tr></thead><tbody><tr><td>char</td><td>-128~+127</td><td></td></tr><tr><td>short</td><td>-32767~+32768</td><td>3*10^4</td></tr><tr><td>unsigned</td><td>short0~+65536</td><td>6*10^4</td></tr><tr><td>int&#x3D;long</td><td>-2147483648~+2147483647</td><td>2*10^9</td></tr><tr><td>unsigned int</td><td>0~+4294967295</td><td>4*10^9</td></tr><tr><td>long long</td><td>-9223372036854775808~+9223372036854775807</td><td>9*10^18</td></tr></tbody></table><p>回文判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_pail</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s = <span class="built_in">to_string</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="built_in">reverse</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最小公倍数 和 最大公因数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span>?a:<span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a * b)/<span class="built_in">gcd</span>(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构的学习</title>
      <link href="/2023/08/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>万能头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>利用auto关键字遍历map集合</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; mymap;</span><br><span class="line">mymap[<span class="string">&quot;A&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">mymap[<span class="string">&quot;B&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">mymap[<span class="string">&quot;C&quot;</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; pair : mymap) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key:&quot;</span> &lt;&lt; pair.first &lt;&lt; <span class="string">&quot;value:&quot;</span> &lt;&lt; pair.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之路</title>
      <link href="/2023/08/10/%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF/"/>
      <url>/2023/08/10/%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/646850472">算法学习路线</a></p><p>我给自己定下目标入下：</p><ul><li><input disabled="" type="checkbox"> stl语法先完成</li></ul><p>学习过程记录如下:<br>具体如下：<br>2023&#x2F;8&#x2F;10 map</p><p>路线大致如下:<br></p><ol><li>洛谷入门50道题</li><li>然后就是提高</li><li>学习算法模型之类，总结<br>最重要的是写好笔记和题解<br><br>有计划的完成，不可三天打鱼两天晒网</li></ol><p>2023&#x2F;8&#x2F;11</p><ul><li>注册个洛谷账号</li><li>小写两道简单的题目</li></ul><p>2023&#x2F;9&#x2F;20</p><ul><li>跟着视频刷题到这</li><li>写了6期，大概30题目前未知</li></ul><p>需要整理笔记</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用</title>
      <link href="/2023/08/10/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/10/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="如何创建一篇文章"><a href="#如何创建一篇文章" class="headerlink" title="如何创建一篇文章:"></a>如何创建一篇文章:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo new &quot;my blog&quot;</span><br></pre></td></tr></table></figure><h2 id="提交文章的步骤"><a href="#提交文章的步骤" class="headerlink" title="提交文章的步骤"></a>提交文章的步骤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo generate</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo deploy</span><br></pre></td></tr></table></figure><p>注：如果git后，发现网站并没有更改，是由于浏览器缓存导致的<br>使用如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo clean</span><br></pre></td></tr></table></figure><h2 id="如何给别人贡献代码"><a href="#如何给别人贡献代码" class="headerlink" title="如何给别人贡献代码"></a>如何给别人贡献代码</h2><ol><li>查看项目</li><li>提issue，看是否需要添加或者更改</li><li>先fork别人项目到自己仓库</li><li>git clone 克隆项目（<strong>一定是自己仓库里面的</strong>，路径名是自己的用户民）</li><li>注意读readme文件</li><li>更改和添加</li><li>测试</li><li>git add . (将文件添加到暂存区)(.表示所有，可以换成需要提交的目录)</li><li>注意更改了哪些部分，不要随便动别的部分</li><li>git commit -m “提交描述”（创建提交）</li><li>git push origin 分支名（将<code>分支名</code>替换为您要推送的分支的名称。通常，主分支的名称是<code>master</code>。）</li><li>最后在github上对比下代码</li><li>发送pull a request即可。</li></ol><p><code>git branch -a</code><br>查看所有分支</p><p>这会列出本地仓库和远程仓库中的所有分支。在命令执行后，你将看到一个包含所有分支的列表。本地分支将以 * 标记，表示当前所在的分支，而远程分支将以 remotes&#x2F;origin&#x2F; 开头。</p><p>以下是一些常用的 Git 命令的总结，以表格形式呈现：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>git init</code></td><td>在当前目录初始化一个新的 Git 仓库</td></tr><tr><td><code>git clone &lt;repository&gt;</code></td><td>克隆（下载）一个远程仓库到本地</td></tr><tr><td><code>git status</code></td><td>显示工作树的状态，包括已修改、已暂存和未跟踪的文件</td></tr><tr><td><code>git add &lt;file&gt;</code></td><td>将文件添加到暂存区</td></tr><tr><td><code>git commit -m &quot;&lt;message&gt;&quot;</code></td><td>将暂存区的文件提交到本地仓库，附带提交信息</td></tr><tr><td><code>git pull</code></td><td>从远程仓库拉取最新的提交</td></tr><tr><td><code>git push</code></td><td>将本地提交推送到远程仓库</td></tr><tr><td><code>git branch</code></td><td>列出本地分支</td></tr><tr><td><code>git branch &lt;branch&gt;</code></td><td>创建一个新的分支</td></tr><tr><td><code>git checkout &lt;branch&gt;</code></td><td>切换到指定分支</td></tr><tr><td><code>git merge &lt;branch&gt;</code></td><td>将指定分支的更改合并到当前分支</td></tr><tr><td><code>git remote -v</code></td><td>显示远程仓库的详细信息</td></tr><tr><td><code>git log</code></td><td>显示提交历史记录</td></tr><tr><td><code>git tag &lt;tagname&gt;</code></td><td>创建一个标签（版本号）</td></tr><tr><td><code>git remote show &lt;name&gt;</code></td><td>显示指定远程仓库的详细信息</td></tr><tr><td><code>git fetch</code></td><td>从远程仓库获取最新的提交，不合并到本地分支</td></tr></tbody></table><p>这只是一些常用的 Git 命令，还有其他许多命令和选项可用于不同的 Git 操作。你可以使用 <code>git --help</code> 命令来获取更多关于 Git 命令和选项的帮助信息。</p><p>在<code>Windows</code>替代<code>Linux</code>的命令：<br><code>export DASHSCOPE_API_KEY=YOUR_DASHSCOPE_API_KEY</code><br><code>set DASHSCOPE_API_KEY=YOUR_DASHSCOPE_API_KEY</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>godot</title>
      <link href="/2023/08/10/godot%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/10/godot%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="开始学习godot"><a href="#开始学习godot" class="headerlink" title="开始学习godot"></a>开始学习godot</h1><p>学习俯视角射击</p><ul><li><input checked="" disabled="" type="checkbox"> 改进发射子弹的bug</li></ul><p>2023&#x2F;8&#x2F;11<br>完成的事项如下</p><ul><li>建立基地</li><li>AI添加进攻状态</li><li>简单看了shader</li></ul><p>2023&#x2F;8&#x2F;12<br>完成部分</p><ul><li>结束了俯视角射击<br><br>我并不打算完整看完所有视频，发现学习速度太慢，相反我选择按内容学习<br>比如今天我学习了</li><li>navagation导航功能的实现<br>接下我会按照需要学习，不会重复学习东西<br><br>接下来会着重学习shader</li></ul><p><strong>并尝试开发一个完整的游戏</strong></p><p>2023&#x2F;8&#x2F;14<br>我吐了🤮，今天小看shader发现，不是很会，迷糊<br>当然有好的教程，只是我懒惰<br><br>一本教程:<br><a target="_blank" rel="noopener" href="https://thebookofshaders.com/03/?lan=ch">shader教程</a><br><br><br>今天看了2D Animation 4-direction with Node State Machine in Animation Tree<br>但有个bug死活找不到，当角色挥舞剑后，会一直使用该剑。<br>不能停止。调试半天还是如此<br><br><em>教程是fodot4的，我的是4.1，不确定是否为版本不符合导致</em><br><br>但愿如此<br><br><br>2023&#x2F;8&#x2F;15<br>今天没有学godot，相反尝试做asset，<br>看了ai画画。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -godot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我听罗大佑</title>
      <link href="/2023/01/26/%E6%88%91%E5%90%AC%E7%BD%97%E5%A4%A7%E4%BD%91/"/>
      <url>/2023/01/26/%E6%88%91%E5%90%AC%E7%BD%97%E5%A4%A7%E4%BD%91/</url>
      
        <content type="html"><![CDATA[<p>我想，大多数人听的第一首歌是大佑先生的《童年》，而我是从《之乎者也》这张专辑初识罗大佑。<br>从初中升到高中再到大学，随着年龄，阅历的增长，我不禁开始思考。我产生了许多关于历史，政治，民族，宗教，社会问题，但我无法去解释这些高深的问题，理解也是刻薄浅显的，我也变得更加亢奋，的我，发现了摇滚。</p><p>是的，摇滚绝对是音乐史中最伟大的发明。罗大佑先生的《之乎者也》让流行音乐不再是靡靡之音，它能承载人文关怀、批判反思。呐喊!拼命的呐喊!无拘的呐喊!为反抗而高歌!这就是摇滚的教条。</p><p>麻木迷失的人儿开始重新思考。在《鹿港小镇》中，在西风与东风，传统与现代，严肃与通俗相交织的时代，他批判了高速发展的现代社会泯灭人性。在《爱人同志》中，他写到“怎么也分不出左右还要向”，隐晦地表达，爱情的皮囊下是政治的汹涌洪流。</p><p> 罗大佑让我感受到了一位音乐人的人文关怀。从《伴侣》到《伴侣2020》，从03到20年，从非典到新冠，罗大佑的词是时代历史的恢宏叙事。从《亚细亚的孤儿》到《东方之珠》，他通过歌曲反思两岸三地痛岁月，中华民族的悠悠历史。他敢于直面冷峻的社会问题，敢于正视淋漓的鲜血。他那饱含深情，充满沧桑的嗓音正是这个苦难民族的声声哭喊。</p><p>反抗后是一段沉淀。青年人永远是充满着斗志激情，年龄大了，便会趋于保守，时常会被这个古老文明的历史旋律唤起。我们向往稳定，产生乡愁，渴望亲情。<br>民谣成为最好的寄托。大佑写道“给我个温暖的真情和一个燃烧的热情，让我这漂泊的心灵有找到家的心情”。家三部曲，恋曲系列，人物三部曲，现象系列等等。<br>从70年代的斗争，跨入新世纪迷茫，走入新征程热忱。罗大佑的音乐永不停歇，与时代的凯歌构成一部恢宏的交响。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake</title>
      <link href="/2023/01/26/cmake/"/>
      <url>/2023/01/26/cmake/</url>
      
        <content type="html"><![CDATA[<p><a target="_blank" rel="noopener" href="https://www.runoob.com/w3cnote/cpp-static-library-and-dynamic-library.html">C++静态库与动态库</a></p><p>Linux静态库命名规范:<br>必须是”lib[your_library_name].a”：lib为前缀，中间是静态库名，扩展名为.a。</p><p>动态链接库的名字形式为 libxxx.so，前缀是lib，后缀名为”.so”</p><p>在Windows平台下，静态库和动态库的文件后缀通常如下：</p><p>静态库：.lib<br>动态库：.dll</p><p>文件 -&gt; 编译 -&gt; 目标文件 -&gt; 链接 -&gt; 可执行文件。</p><p>构建：编译 + 链接</p><ol><li><p>源文件：你编写的源代码文件，通常以扩展名<code>.c</code>（C语言）或<code>.cpp</code>（C++语言）等形式存在。</p></li><li><p>编译：源文件经过编译器（如GCC、Clang等）处理，将其转换为机器可以理解的低级代码（汇编语言或目标机器代码），但并不生成可执行文件。编译的输出通常是目标文件（Object file），以<code>.o</code>或<code>.obj</code>等形式存在。</p></li><li><p>链接：在链接阶段，将多个目标文件（或者已经编译好的库文件）合并在一起，解析它们之间的符号引用关系，生成最终的可执行文件。链接器（如ld）负责执行这个任务。</p></li><li><p>构建：构建是一个更广义的概念，它包括了编译和链接的过程。在构建过程中，编译器将源文件编译成目标文件，然后链接器将这些目标文件链接成可执行文件。</p></li><li><p>可执行文件：最终生成的文件，它是可以直接运行的程序，通常没有扩展名（在某些操作系统中可能会有扩展名，如<code>.exe</code>）。</p></li></ol><p>所以，正确的流程应该是：源文件 -&gt; 编译 -&gt; 目标文件 -&gt; 链接 -&gt; 可执行文件。</p><p>需要注意的是，构建过程可能会涉及到其他操作，如预处理（处理<code>#include</code>、宏替换等）、优化、库的链接等。这些步骤可以根据具体的构建系统和编译器进行配置和调整。</p><h2 id="学习cmake之前需要了解什么是Makefile"><a href="#学习cmake之前需要了解什么是Makefile" class="headerlink" title="学习cmake之前需要了解什么是Makefile"></a>学习cmake之前需要了解什么是Makefile</h2><p>makefile:<br>makefile是什么?</p><p>gcc只能一个个文件编译和构建，通过makefile可以一起操作</p><p>makefile是什么?</p><blockquote><p>Makefile是一种文本文件，通常用于构建和管理软件项目的自动化构建工具。它包含了一组规则和命令，用于指导编译器和链接器如何编译和构建源代码，生成可执行程序、库文件或其他目标文件。<br>Makefile的主要作用是描述源代码文件之间的依赖关系和构建规则。它根据这些规则和依赖关系来确定哪些文件需要重新编译，从而实现增量编译，提高编译效率。当源代码文件发生变化时，Makefile会自动检测到变化的文件，并重新编译相关的文件，以确保最终生成的可执行程序或库文件是最新的。<br>Makefile使用一种类似于自然语言的语法，其中包含了一些特定的关键字和规则。它通常由目标（target）、依赖关系（dependencies）和命令（commands）组成。目标表示需要生成的文件或执行的操作，依赖关系表示目标所依赖的文件或其他目标，命令表示如何生成目标或执行操作的具体命令。<br><strong>Makefile通常与<code>make</code>命令一起使用。make命令读取Makefile文件，并根据其中的规则和依赖关系来执行相应的命令，从而自动化构建项目。</strong><br>使用Makefile可以简化项目的构建过程，减少手动操作的复杂性，提高开发效率。它广泛应用于各种编程语言和开发环境中，特别是在C&#x2F;C++项目中常见。</p></blockquote><p>简而言之：<br>Makefile是一种用于自动化构建和管理软件项目的工具，它通过描述源代码文件之间的依赖关系和构建规则，实现了自动化的编译和构建过程。</p><p>但makefile的编写还是很复杂：<br>因此cmake就是自动生成makefile文件。</p><h2 id="cmake-是什么？"><a href="#cmake-是什么？" class="headerlink" title="cmake 是什么？"></a>cmake 是什么？</h2><blockquote><p>CMake是一个跨平台的开源构建工具，通过描述项目的构建规则和依赖关系，生成适合不同构建系统使用的构建文件。它简化了项目的构建过程，提供了统一的构建系统抽象层，使开发人员能够以一种简洁和可移植的方式管理和构建项目。</p></blockquote><p>cmake会自动生成makefile文件，对吗？</p><blockquote><p>是的，CMake可以自动生成Makefile文件。当你使用CMake来管理一个项目时，你可以编写一个CMakeLists.txt文件，其中包含了项目的配置信息和构建规则。然后，你可以使用CMake工具来处理这个CMakeLists.txt文件，并生成适合于Make构建系统使用的Makefile文件。<br>CMake会根据CMakeLists.txt文件中的规则和配置信息，自动解析项目的源代码文件、依赖关系和构建选项，并生成相应的Makefile文件。生成的Makefile文件会包含编译目标、依赖关系以及编译和链接的命令等信息，以便于使用make命令进行项目的构建。<br>生成的Makefile文件通常会根据项目的结构和配置进行组织，以确保正确的依赖关系和构建顺序。当你运行make命令时，它会读取Makefile文件，并根据其中的规则和命令来自动化地进行编译、链接和构建操作。<br>需要注意的是，CMake并不仅仅局限于生成Makefile文件。它还可以生成其他构建系统所需的构建文件，如Ninja build files、Visual Studio项目文件等，这样你可以根据需要选择不同的构建系统进行项目的构建。<br>总而言之，CMake可以根据CMakeLists.txt文件生成适合于不同构建系统的构建文件，其中包括Makefile文件。这样，你可以使用CMake来管理项目的配置和构建过程，并利用生成的Makefile文件来自动化地进行项目的构建。</p></blockquote><ol><li>新建文件 CMakeLists.txt<br><code>add_executable(main main.cpp)</code><br><code>add_executable</code> : 使用指定的源文件生成目标可执行文件<br>如上，生成 main.cpp 源文件的目标可执行文件 main</li></ol><p><code>cmake .</code> ：在当前文件路径下 . 寻找 CMakeLists.txt ，根据它来产生Makefile文件</p><p>补充：<br><code>cmake -G &quot;MinGW Makefiles&quot; .</code>: 通过 -G 选项指定生成器为”MinGW Makefiles”</p><p><code>make</code>: 寻找路径下的，刚刚生成的 Makefile 文件 ，根据该文件构建built 出可执行文件 main </p><p><code>cmake_minimum_required(VERSION 3.14)</code>:指定cmake要求的最低版本</p><p><code>project(hello)</code> : 指定工程名称未hello</p><p><img src="/./pic/cmake.png"></p><p><code>set(CMAKE_CXX_STANDARD 11)</code> : 指定cpp版本</p><p><code>add_compile_options(-g -Wunused)</code>:给后续的编译目标加上选项</p><p><code>target_compile_options(main PUBLIC -Wall -Werror)</code>:为指定的目标添加编译选项<br><img src="/./pic/cmake-target-error.png"></p><h2 id="多文件的编译"><a href="#多文件的编译" class="headerlink" title="多文件的编译"></a>多文件的编译</h2><p>在<code>add_execuatble(main add.cpp main.cpp)</code>:添加可执行文件&#96;add.cpp</p><p><code>add_executable(main add.cpp sub.cpp main.cpp)</code>：添加更多</p><p>自动把 src 目录下的 cpp 文件添加到项目里</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(./)</span><br><span class="line">修改文件路径后，需要重新指定头文件的位置</span><br><span class="line"></span><br><span class="line">自动添加：</span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SOURCES <span class="string">&quot;src/*.cpp&quot;</span>)</span><br><span class="line">将src文件下以cpp结尾的文件放入 SOURCES 变量中，<span class="string">&quot;src/*.cpp&quot;</span> 是通配符</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main <span class="variable">$&#123;SOURCES&#125;</span> main.cpp)</span><br><span class="line">记得，更改executable编译选项。</span><br></pre></td></tr></table></figure><p>存在多个源文件，源文件分布在不同的文件夹下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SOURCES <span class="string">&quot;src/*.cpp&quot;</span> <span class="string">&quot;src1/*.cpp&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main <span class="variable">$&#123;SOURCES&#125;</span> main.cpp)</span><br></pre></td></tr></table></figure><p>头文件在不同文件夹<br><code>include_directories(./ ./include)</code></p><p>有两个main函数，两个可执行文件<br>多目标编译:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(main <span class="variable">$&#123;SOURCES&#125;</span> main.cpp)</span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> <span class="variable">$&#123;SOURCES&#125;</span> main1.cpp)</span><br></pre></td></tr></table></figure><p><img src="/./pic/mult-target.png"></p><h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><p>编译：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(MUL_SOURCES ./mul/mul.cpp)</span><br><span class="line"><span class="keyword">add_library</span>(mul STATIC <span class="variable">$&#123;MUL_SOURCES&#125;</span>)</span><br></pre></td></tr></table></figure><ul><li>add_library：指定从某些源文件创建库文件（静态库、动态库）<br>STATIC<br>链接:<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CMakeLists.txt</span><br><span class="line"><span class="keyword">link_directories</span>(./)</span><br><span class="line"><span class="keyword">link_libraries</span>(mul)</span><br><span class="line"></span><br><span class="line"><span class="keyword">OR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_directories</span>(main PUBLIC ./)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(main mul)</span><br></pre></td></tr></table></figure></li></ul><h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><p>编译:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(MUL_SOURCES ./mul/mul.cpp)</span><br><span class="line"><span class="keyword">add_library</span>(mul SHARED <span class="variable">$&#123;MUL_SOURCES&#125;</span>)</span><br></pre></td></tr></table></figure><p>SHARED<br>说明</p><ul><li>add_library：指定从某些源文件创建库文件（静态库、动态库）</li></ul><p>链接:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CMakeLists.txt</span><br><span class="line"><span class="keyword">link_directories</span>(./)</span><br><span class="line"><span class="keyword">link_libraries</span>(mul)</span><br><span class="line"></span><br><span class="line"><span class="keyword">OR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_directories</span>(main PUBLIC ./)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(main mul)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/2023/01/26/index/"/>
      <url>/2023/01/26/index/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2023/01/26/2023-1-26%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/26/2023-1-26%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="这是第一篇文章"><a href="#这是第一篇文章" class="headerlink" title="这是第一篇文章"></a>这是第一篇文章</h2><p><strong>通过hexo挂载在GitHub实现butterfly主题</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从今天开始就要认真写blog了</p>]]></content>
      
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/25/hello-world/"/>
      <url>/2023/01/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a target="_blank" rel="noopener" href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a target="_blank" rel="noopener" href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a target="_blank" rel="noopener" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a target="_blank" rel="noopener" href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
