<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/09/13/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%B8%80%E6%9C%9F/"/>
      <url>/2023/09/13/%E6%B4%9B%E8%B0%B7%E7%AC%AC%E4%B8%80%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="NOIP2002-普及组-过河卒（动态规划）"><a href="#NOIP2002-普及组-过河卒（动态规划）" class="headerlink" title="[NOIP2002 普及组] 过河卒（动态规划）"></a>[NOIP2002 普及组] 过河卒（动态规划）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>棋盘上 $A$ 点有一个过河卒，需要走到目标 $B$ 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 $C$ 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p><p>棋盘用坐标表示，$A$ 点 $(0, 0)$、$B$ 点 $(n, m)$，同样马的位置坐标是需要给出的。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/f3wwgqj6.png"></p><p>现在要求你计算出卒从 $A$ 点能够到达 $B$ 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行四个正整数，分别表示 $B$ 点坐标和马的坐标。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示所有的路径条数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 6 3 3</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于 $100 %$ 的数据，$1 \le n, m \le 20$，$0 \le$ 马的坐标 $\le 20$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2002 普及组第四题</p><p>题解：  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> mp[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//马走点</span></span><br><span class="line"><span class="type">int</span> xf[<span class="number">8</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-2</span> &#125;;</span><br><span class="line"><span class="type">int</span> yf[<span class="number">8</span>] = &#123; <span class="number">2</span>,<span class="number">1</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-2</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//m,n B点</span></span><br><span class="line"><span class="comment">//x,y马点</span></span><br><span class="line"><span class="type">int</span> n, m, x, y;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;</span><br><span class="line">n++; m++; x++; y++;</span><br><span class="line"><span class="comment">//标出能走的点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> xp = x + xf[i];</span><br><span class="line"><span class="type">int</span> yp = y + yf[i];</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &lt;= xp &amp;&amp; xp &lt;= n &amp;&amp; <span class="number">1</span> &lt;= yp &amp;&amp; yp &lt;= m)</span><br><span class="line">mp[xp][yp] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//马自身</span></span><br><span class="line">mp[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//起点只有一条线</span></span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (mp[i][j]) dp[i][j] = <span class="number">0</span>;<span class="comment">//马控制点，则为0线路</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; dp[n][m];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于动态规划：  </p><ol><li>状态定义：</li><li>状态转移方程：</li><li>边界条件：</li><li>计算顺序：</li></ol><p>如该题:<br>最重要就是得到状态转移方程，即<br>$<br>dp[i][j] &#x3D; dp[i-1][j] + dp[i][j-1]<br>$<br>d[i][j]表示从该点的线路数<br>一个点的线路数等于从它上面一个点走下来的线路数加上从它左边走下来的线路数<br>但是注意：除了第一个点d[1][1] &#x3D; 1  </p><p>先去掉所有不能使用的点  </p><p>该题需要注意，马自己的点也是控制点</p><h1 id="NOIP2011-提高组-铺地毯（枚举）"><a href="#NOIP2011-提高组-铺地毯（枚举）" class="headerlink" title="[NOIP2011 提高组] 铺地毯（枚举）"></a>[NOIP2011 提高组] 铺地毯（枚举）</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>为了准备一个独特的颁奖典礼，组织者在会场的一片矩形区域（可看做是平面直角坐标系的第一象限）铺上一些矩形地毯。一共有 $n$ 张地毯，编号从 $1$ 到 $n$。现在将这些地毯按照编号从小到大的顺序平行于坐标轴先后铺设，后铺的地毯覆盖在前面已经铺好的地毯之上。</p><p>地毯铺设完成后，组织者想知道覆盖地面某个点的最上面的那张地毯的编号。注意：在矩形地毯边界和四个顶点上的点也算被地毯覆盖。</p><h2 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入共 $n + 2$ 行。</p><p>第一行，一个整数 $n$，表示总共有 $n$ 张地毯。</p><p>接下来的 $n$ 行中，第 $i+1$ 行表示编号 $i$ 的地毯的信息，包含四个整数 $a ,b ,g ,k$，每两个整数之间用一个空格隔开，分别表示铺设地毯的左下角的坐标 $(a, b)$ 以及地毯在 $x$ 轴和 $y$ 轴方向的长度。</p><p>第 $n + 2$ 行包含两个整数 $x$ 和 $y$，表示所求的地面的点的坐标 $(x, y)$。</p><h2 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共 $1$ 行，一个整数，表示所求的地毯的编号；若此处没有被地毯覆盖则输出 <code>-1</code>。</p><h2 id="样例-1-1"><a href="#样例-1-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-1"><a href="#样例输入-1-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 0 2 3</span><br><span class="line">0 2 3 3</span><br><span class="line">2 1 3 3</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-1"><a href="#样例输出-1-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="样例-2"><a href="#样例-2" class="headerlink" title="样例 #2"></a>样例 #2</h2><h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 #2"></a>样例输入 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 0 2 3</span><br><span class="line">0 2 3 3</span><br><span class="line">2 1 3 3</span><br><span class="line">4 5</span><br></pre></td></tr></table></figure><h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 #2"></a>样例输出 #2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p>【样例解释 1】</p><p>如下图，$1$ 号地毯用实线表示，$2$ 号地毯用虚线表示，$3$ 号用双实线表示，覆盖点 $(2,2)$ 的最上面一张地毯是 $3$ 号地毯。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/gcm3ne0q.png"></p><p>【数据范围】</p><p>对于 $30%$ 的数据，有 $n \le 2$。<br>对于 $50%$ 的数据，$0 \le a, b, g, k \le 100$。<br>对于 $100%$ 的数据，有 $0 \le n \le 10^4$, $0 \le a, b, g, k \le {10}^5$。   </p><p>noip2011 提高组 day1 第 $1$ 题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左下角和右上角的坐标</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">&#125;d[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> a, b, g, k;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; g &gt;&gt; k;</span><br><span class="line">d[i].x1 = a;</span><br><span class="line">d[i].y1 = b;</span><br><span class="line">d[i].x2 = a + g - <span class="number">1</span>;</span><br><span class="line">d[i].y2 = b + k - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从后面开始读</span></span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= d[i].x1 &amp;&amp; y &gt;= d[i].y1 &amp;&amp; x &lt;= d[i].x2 &amp;&amp; y &lt;= d[i].y2) &#123;</span><br><span class="line">ans = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将数据先用结构体存储起（存储顺便将长度转化为坐标，方便后面对于一个点是否在被覆盖的判断）<br>最后是<strong>从后往前遍历</strong>，如果当前点被覆盖，则直接输出当前覆盖的地毯编号，否则继续遍历。</p><h1 id="NOIP1998-普及组-三连击-set使用"><a href="#NOIP1998-普及组-三连击-set使用" class="headerlink" title="[NOIP1998 普及组] 三连击(set使用)"></a>[NOIP1998 普及组] 三连击(set使用)</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>本题为提交答案题，您可以写程序或手算在本机上算出答案后，直接提交答案文本，也可提交答案生成程序。</p><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>将 $1, 2, \ldots , 9$ 共 $9$ 个数分成 $3$ 组，分别组成 $3$ 个三位数，且使这 $3$ 个三位数构成 $1 : 2 : 3$ 的比例，试求出所有满足条件的 $3$ 个三位数。</p><h2 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h2><p>无</p><h2 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h2><p>若干行，每行 $3$ 个数字。按照每行第 $1$ 个数字升序排列。</p><h2 id="样例-1-2"><a href="#样例-1-2" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-2"><a href="#样例输入-1-2" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-2"><a href="#样例输出-1-2" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">192 384 576</span><br><span class="line">* * *</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line">（剩余部分不予展示）</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isUnique</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j,<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="comment">//将每个数的每一位添加如set集合中</span></span><br><span class="line"><span class="keyword">while</span> (i) &#123; s.<span class="built_in">insert</span>(i % <span class="number">10</span>); i /= <span class="number">10</span>; &#125;</span><br><span class="line"><span class="keyword">while</span> (j) &#123; s.<span class="built_in">insert</span>(j % <span class="number">10</span>); j /= <span class="number">10</span>; &#125;</span><br><span class="line"><span class="keyword">while</span> (k) &#123; s.<span class="built_in">insert</span>(k % <span class="number">10</span>); k /= <span class="number">10</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : s) <span class="keyword">if</span> (i == <span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">size</span>() == <span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">123</span>; i &lt;= <span class="number">350</span>; ++i) &#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">2</span> * i, k = <span class="number">3</span> * i;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isUnique</span>(i, j, k))</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; j &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; k &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>巧妙使用set集合，set集合所有元素都是唯一的，所以我们可以将每个数的每一位都添加如set集合中。</p><h1 id="NOIP2001-普及组-数的计算-动态规划"><a href="#NOIP2001-普及组-数的计算-动态规划" class="headerlink" title="[NOIP2001 普及组] 数的计算(动态规划)"></a>[NOIP2001 普及组] 数的计算(动态规划)</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出正整数 $n$，要求按如下方式构造数列：</p><ol><li>只有一个数字 $n$ 的数列是一个合法的数列。</li><li>在一个合法的数列的末尾加入一个正整数，但是这个正整数不能超过该数列最后一项的一半，可以得到一个新的合法数列。</li></ol><p>请你求出，一共有多少个合法的数列。两个合法数列 $a, b$ 不同当且仅当两数列长度不同或存在一个正整数 $i \leq |a|$，使得 $a_i \neq b_i$。</p><h2 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入只有一行一个整数，表示 $n$。</p><h2 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数，表示合法的数列个数。</p><h2 id="样例-1-3"><a href="#样例-1-3" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-3"><a href="#样例输入-1-3" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-3"><a href="#样例输出-1-3" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><h3 id="样例-1-解释"><a href="#样例-1-解释" class="headerlink" title="样例 1 解释"></a>样例 1 解释</h3><p>满足条件的数列为：</p><ul><li>$6$</li><li>$6, 1$</li><li>$6, 2$</li><li>$6, 3$</li><li>$6, 2, 1$</li><li>$6, 3, 1$</li></ul><h3 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h3><p>对于全部的测试点，保证 $1 \leq n \leq 10^3$。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>本题数据来源是 NOIP 2001 普及组第一题，但是原题的题面描述和数据不符，故对题面进行了修改，使之符合数据。原题面如下，谨供参考：</p><blockquote><p>我们要求找出具有下列性质数的个数（包含输入的正整数 $n$）。</p><p>先输入一个正整数 $n$（$n \le 1000$），然后对此正整数按照如下方法进行处理：</p><ol><li>不作任何处理；</li><li>在它的左边拼接一个正整数，但该正整数不能超过原数，或者是上一个被拼接的数的一半；</li><li>加上数后，继续按此规则进行处理，直到不能再加正整数为止。</li></ol></blockquote><p>感谢 @<a href="/user/120868">dbxxx</a> 对本题情况的反馈，原题面的问题见<a target="_blank" rel="noopener" href="https://www.luogu.com.cn/discuss/526184">本贴</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> d[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i / <span class="number">2</span>; j++) &#123;</span><br><span class="line">d[i] += d[j];</span><br><span class="line">&#125;</span><br><span class="line">d[i]++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; d[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该题最重要是理解题意，并将公式推出来。</p><p><img src="https://pic.imgdb.cn/item/650854f6204c2e34d3aa3dc1.jpg"></p><h1 id="NOIP2001-普及组-最大公约数和最小公倍数问题"><a href="#NOIP2001-普及组-最大公约数和最小公倍数问题" class="headerlink" title="[NOIP2001 普及组] 最大公约数和最小公倍数问题"></a>[NOIP2001 普及组] 最大公约数和最小公倍数问题</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入两个正整数 $x_0, y_0$，求出满足下列条件的 $P, Q$ 的个数：</p><ol><li><p>$P,Q$ 是正整数。</p></li><li><p>要求 $P, Q$ 以 $x_0$ 为最大公约数，以 $y_0$ 为最小公倍数。</p></li></ol><p>试求：满足条件的所有可能的 $P, Q$ 的个数。</p><h2 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行两个正整数 $x_0, y_0$。</p><h2 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个数，表示求出满足条件的 $P, Q$ 的个数。</p><h2 id="样例-1-4"><a href="#样例-1-4" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1-4"><a href="#样例输入-1-4" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 60</span><br></pre></td></tr></table></figure><h3 id="样例输出-1-4"><a href="#样例输出-1-4" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><p>$P,Q$ 有 $4$ 种：</p><ol><li>$3, 60$。</li><li>$15, 12$。</li><li>$12, 15$。</li><li>$60, 3$。</li></ol><p>对于 $100%$ 的数据，$2 \le x_0, y_0 \le {10}^5$。</p><p><strong>【题目来源】</strong></p><p>NOIP 2001 普及组第二题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="comment">//最大公约数</span></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最小共倍数</span></span><br><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b / <span class="built_in">gcd</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> x, y,ans=<span class="number">0</span>; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> p = x; p &lt;= y; ++p) &#123;</span><br><span class="line"><span class="type">int</span> q = x * y / p;</span><br><span class="line"><span class="keyword">if</span> (x * y != p * q)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">gcd</span>(p, q) == x &amp;&amp; <span class="built_in">lcm</span>(p, q) == y) ans++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点:<br>a * b &#x3D; gcd(a,b) * lcm(a,b)</p><p>最大公约数和最小公倍数的求解函数</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>题解</title>
      <link href="/2023/08/12/%E9%A2%98%E8%A7%A3/"/>
      <url>/2023/08/12/%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="NOIP2005-普及组-校门外的树"><a href="#NOIP2005-普及组-校门外的树" class="headerlink" title="[NOIP2005 普及组] 校门外的树"></a>[NOIP2005 普及组] 校门外的树</h1><p><a target="_blank" rel="noopener" href="https://www.luogu.com.cn/problem/P1047">地址</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, m = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; m;</span><br><span class="line"><span class="type">int</span> upper = <span class="number">0</span>, lower = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; lower;</span><br><span class="line">cin &gt;&gt; upper;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">cin &gt;&gt; left;</span><br><span class="line">cin &gt;&gt; right;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= lower &amp;&amp; right &gt;= lower &amp;&amp; right &lt;= upper) &#123;</span><br><span class="line">lower = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (right &gt;= upper &amp;&amp; left &gt;= lower &amp;&amp; left &lt;= upper) &#123;</span><br><span class="line">upper = right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(left &lt;= lower &amp;&amp; right &gt;= upper)</span><br><span class="line">&#123;</span><br><span class="line">upper = right;</span><br><span class="line">lower = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (right &lt;= lower || left &gt;= upper) &#123;</span><br><span class="line"><span class="comment">//区间不在范围内</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; new_v;</span><br><span class="line">new_v.<span class="built_in">push_back</span>(left);</span><br><span class="line">new_v.<span class="built_in">push_back</span>(right);</span><br><span class="line">v.<span class="built_in">push_back</span>(new_v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在中间</span></span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; final_v;</span><br><span class="line">final_v.<span class="built_in">push_back</span>(lower);</span><br><span class="line">final_v.<span class="built_in">push_back</span>(upper);</span><br><span class="line">v.<span class="built_in">push_back</span>(final_v);</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; i : v)</span><br><span class="line">sum += (i[<span class="number">1</span>] - i[<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; l-sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码，没有考虑到产生的新区域是否和原先的重合</p><p>新的思路：<br><strong>将没砍为0，看了为1，只要在区间的都是要砍的</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> l = <span class="number">0</span>, m = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; m;</span><br><span class="line"><span class="type">int</span> upper = <span class="number">0</span>, lower = <span class="number">0</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10001</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="comment">// 0没有，1砍</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">cin &gt;&gt; lower &gt;&gt; upper;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = lower; j &lt;= upper;j++)</span><br><span class="line">v[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; l-<span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="NOIP2006-普及组-明明的随机数"><a href="#NOIP2006-普及组-明明的随机数" class="headerlink" title="[NOIP2006 普及组] 明明的随机数"></a>[NOIP2006 普及组] 明明的随机数</h1><p><a target="_blank" rel="noopener" href="https://www.luogu.com.cn/problem/P1059">地址</a><br>我自己的解法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> rand_num = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; rand_num;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rand_num; i++) &#123;</span><br><span class="line">cin &gt;&gt; tmp;</span><br><span class="line">it = <span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), tmp);</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line">v.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">cout &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对添加入vector的进行判断，在里面出现过的，就不填入<br><br>其实应该使用set集合，其 <em>不可相同元素、自动排序</em> 适合该题</p><h1 id="NOIP2012-普及组-质因数分解"><a href="#NOIP2012-普及组-质因数分解" class="headerlink" title="[NOIP2012 普及组] 质因数分解"></a>[NOIP2012 普及组] 质因数分解</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知正整数 $n$ 是两个不同的质数的乘积，试求出两者中较大的那个质数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; n / i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两质数相乘得到的数，一定只能由该两质数相乘得到吗？"><a href="#两质数相乘得到的数，一定只能由该两质数相乘得到吗？" class="headerlink" title="两质数相乘得到的数，一定只能由该两质数相乘得到吗？"></a>两质数相乘得到的数，一定只能由该两质数相乘得到吗？</h2><p><strong>两个质数相乘得到的数，一定只能由这两个质数相乘得到。</strong></p><p>这个性质被称为<strong>唯一分解定理</strong>（Unique Factorization Theorem），也被称为正整数的唯一分解定理或质因数分解定理。它指出任何一个大于 1 的整数都可以被唯一地分解为质数的乘积，而且这个分解是唯一的，不考虑质数因子的顺序。</p><p>例如，如果我们将两个质数 2 和 3 相乘，得到 2 * 3 &#x3D; 6。根据唯一分解定理，6 只能分解为 2 和 3 相乘的结果，也就是说，6 的质因数分解形式为 2 * 3。</p><p>因此，两个质数相乘得到的数，一定只能由这两个质数相乘得到，而且这个分解是唯一的。</p><p>需要寻早元素中的最大值，使用max_element函数，如果得到两个相同的最大值，默认是取最后一个，如果需要第一个出现的，则需要：比较器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompareValues</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.second &lt; b.second;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="keyword">if</span> (sum &gt; <span class="number">8</span>)</span><br><span class="line">m[i] = sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">auto</span> m_ele = <span class="built_in">max_element</span>(m.<span class="built_in">begin</span>(), m.<span class="built_in">end</span>(), <span class="built_in">CompareValues</span>());</span><br><span class="line">cout&lt;&lt; m_ele-&gt;first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2023&#x2F;8&#x2F;17<br>将数转化为字符串则：<br><code>to_string(num)</code></p><p>字符如<code>&quot;dasda&quot;[1]</code>去出来的为char类型  </p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1>]]></content>
      
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构的学习</title>
      <link href="/2023/08/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>万能头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>利用auto关键字遍历map集合</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; mymap;</span><br><span class="line">mymap[<span class="string">&quot;A&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">mymap[<span class="string">&quot;B&quot;</span>] = <span class="number">2</span>;</span><br><span class="line">mymap[<span class="string">&quot;C&quot;</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; pair : mymap) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key:&quot;</span> &lt;&lt; pair.first &lt;&lt; <span class="string">&quot;value:&quot;</span> &lt;&lt; pair.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之路</title>
      <link href="/2023/08/10/%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF/"/>
      <url>/2023/08/10/%E7%AE%97%E6%B3%95%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p><a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/646850472">算法学习路线</a></p><p>我给自己定下目标入下：</p><ul><li><input disabled="" type="checkbox"> stl语法先完成</li></ul><p>学习过程记录如下:<br>具体如下：<br>2023&#x2F;8&#x2F;10 map</p><p>路线大致如下:<br></p><ol><li>洛谷入门50道题</li><li>然后就是提高</li><li>学习算法模型之类，总结<br>最重要的是写好笔记和题解<br><br>有计划的完成，不可三天打鱼两天晒网</li></ol><p>2023&#x2F;8&#x2F;11</p><ul><li>注册个洛谷账号</li><li>小写两道简单的题目</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用hexo教程</title>
      <link href="/2023/08/10/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%95%99%E7%A8%8B/"/>
      <url>/2023/08/10/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hexo%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="如何创建一篇文章"><a href="#如何创建一篇文章" class="headerlink" title="如何创建一篇文章:"></a>如何创建一篇文章:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo new &quot;my blog&quot;</span><br></pre></td></tr></table></figure><h2 id="提交文章的步骤"><a href="#提交文章的步骤" class="headerlink" title="提交文章的步骤"></a>提交文章的步骤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo generate</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo deply</span><br></pre></td></tr></table></figure><p>注：如果git后，发现网站并没有更改，是由于浏览器缓存导致的<br>使用如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$hexo clean</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>godot</title>
      <link href="/2023/08/10/godot%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/10/godot%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="开始学习godot"><a href="#开始学习godot" class="headerlink" title="开始学习godot"></a>开始学习godot</h1><p>学习俯视角射击</p><ul><li><input checked="" disabled="" type="checkbox"> 改进发射子弹的bug</li></ul><p>2023&#x2F;8&#x2F;11<br>完成的事项如下</p><ul><li>建立基地</li><li>AI添加进攻状态</li><li>简单看了shader</li></ul><p>2023&#x2F;8&#x2F;12<br>完成部分</p><ul><li>结束了俯视角射击<br><br>我并不打算完整看完所有视频，发现学习速度太慢，相反我选择按内容学习<br>比如今天我学习了</li><li>navagation导航功能的实现<br>接下我会按照需要学习，不会重复学习东西<br><br>接下来会着重学习shader</li></ul><p><strong>并尝试开发一个完整的游戏</strong></p><p>2023&#x2F;8&#x2F;14<br>我吐了🤮，今天小看shader发现，不是很会，迷糊<br>当然有好的教程，只是我懒惰<br><br>一本教程:<br><a target="_blank" rel="noopener" href="https://thebookofshaders.com/03/?lan=ch">shader教程</a><br><br><br>今天看了2D Animation 4-direction with Node State Machine in Animation Tree<br>但有个bug死活找不到，当角色挥舞剑后，会一直使用该剑。<br>不能停止。调试半天还是如此<br><br><em>教程是fodot4的，我的是4.1，不确定是否为版本不符合导致</em><br><br>但愿如此<br><br><br>2023&#x2F;8&#x2F;15<br>今天没有学godot，相反尝试做asset，<br>看了ai画画。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -godot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我听罗大佑</title>
      <link href="/2023/01/26/%E6%88%91%E5%90%AC%E7%BD%97%E5%A4%A7%E4%BD%91/"/>
      <url>/2023/01/26/%E6%88%91%E5%90%AC%E7%BD%97%E5%A4%A7%E4%BD%91/</url>
      
        <content type="html"><![CDATA[<p>我想，大多数人听的第一首歌是大佑先生的《童年》，而我是从《之乎者也》这张专辑初识罗大佑。<br>从初中升到高中再到大学，随着年龄，阅历的增长，我不禁开始思考。我产生了许多关于历史，政治，民族，宗教，社会问题，但我无法去解释这些高深的问题，理解也是刻薄浅显的，我也变得更加亢奋，的我，发现了摇滚。</p><p>是的，摇滚绝对是音乐史中最伟大的发明。罗大佑先生的《之乎者也》让流行音乐不再是靡靡之音，它能承载人文关怀、批判反思。呐喊!拼命的呐喊!无拘的呐喊!为反抗而高歌!这就是摇滚的教条。</p><p>麻木迷失的人儿开始重新思考。在《鹿港小镇》中，在西风与东风，传统与现代，严肃与通俗相交织的时代，他批判了高速发展的现代社会泯灭人性。在《爱人同志》中，他写到“怎么也分不出左右还要向”，隐晦地表达，爱情的皮囊下是政治的汹涌洪流。</p><p> 罗大佑让我感受到了一位音乐人的人文关怀。从《伴侣》到《伴侣2020》，从03到20年，从非典到新冠，罗大佑的词是时代历史的恢宏叙事。从《亚细亚的孤儿》到《东方之珠》，他通过歌曲反思两岸三地痛岁月，中华民族的悠悠历史。他敢于直面冷峻的社会问题，敢于正视淋漓的鲜血。他那饱含深情，充满沧桑的嗓音正是这个苦难民族的声声哭喊。</p><p>反抗后是一段沉淀。青年人永远是充满着斗志激情，年龄大了，便会趋于保守，时常会被这个古老文明的历史旋律唤起。我们向往稳定，产生乡愁，渴望亲情。<br>民谣成为最好的寄托。大佑写道“给我个温暖的真情和一个燃烧的热情，让我这漂泊的心灵有找到家的心情”。家三部曲，恋曲系列，人物三部曲，现象系列等等。<br>从70年代的斗争，跨入新世纪迷茫，走入新征程热忱。罗大佑的音乐永不停歇，与时代的凯歌构成一部恢宏的交响。</p>]]></content>
      
      
      
        <tags>
            
            <tag> -音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2023/01/26/2023-1-26%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/26/2023-1-26%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="这是第一篇文章"><a href="#这是第一篇文章" class="headerlink" title="这是第一篇文章"></a>这是第一篇文章</h2><p><strong>通过hexo挂载在GitHub实现butterfly主题</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从今天开始就要认真写blog了</p>]]></content>
      
      
      
        <tags>
            
            <tag> -算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/01/25/hello-world/"/>
      <url>/2023/01/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a target="_blank" rel="noopener" href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a target="_blank" rel="noopener" href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a target="_blank" rel="noopener" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a target="_blank" rel="noopener" href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
